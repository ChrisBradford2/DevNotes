"use strict";(self.webpackChunkdevnotes=self.webpackChunkdevnotes||[]).push([[761],{3905:function(e,i,t){t.d(i,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function n(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}function a(e,i){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);i&&(r=r.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var i=1;i<arguments.length;i++){var t=null!=arguments[i]?arguments[i]:{};i%2?a(Object(t),!0).forEach((function(i){n(e,i,t[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))}))}return e}function u(e,i){if(null==e)return{};var t,r,n=function(e,i){if(null==e)return{};var t,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],i.indexOf(t)>=0||(n[t]=e[t]);return n}(e,i);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],i.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=r.createContext({}),l=function(e){var i=r.useContext(o),t=i;return e&&(t="function"==typeof e?e(i):s(s({},i),e)),t},d=function(e){var i=l(e.components);return r.createElement(o.Provider,{value:i},e.children)},c={inlineCode:"code",wrapper:function(e){var i=e.children;return r.createElement(r.Fragment,{},i)}},p=r.forwardRef((function(e,i){var t=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),p=l(t),m=n,v=p["".concat(o,".").concat(m)]||p[m]||c[m]||a;return t?r.createElement(v,s(s({ref:i},d),{},{components:t})):r.createElement(v,s({ref:i},d))}));function m(e,i){var t=arguments,n=i&&i.mdxType;if("string"==typeof e||n){var a=t.length,s=new Array(a);s[0]=p;var u={};for(var o in i)hasOwnProperty.call(i,o)&&(u[o]=i[o]);u.originalType=e,u.mdxType="string"==typeof e?e:n,s[1]=u;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},525:function(e,i,t){t.r(i),t.d(i,{frontMatter:function(){return u},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var r=t(7462),n=t(3366),a=(t(7294),t(3905)),s=["components"],u={description:"Dans cette formation, qui s'adresse aux d\xe9veloppeurs d'applications et d'interfaces utilisateur (UI) mobiles, vous d\xe9couvrirez Flutter, le framework open source de Google.",slug:"/l-essentiel-de-flutter",tags:["Mobile","Dart"]},o="L'essentiel de Flutter",l={unversionedId:"Sp\xe9cialit\xe9 D\xe9veloppement/Dev Mobile/learning",id:"Sp\xe9cialit\xe9 D\xe9veloppement/Dev Mobile/learning",isDocsHomePage:!1,title:"L'essentiel de Flutter",description:"Dans cette formation, qui s'adresse aux d\xe9veloppeurs d'applications et d'interfaces utilisateur (UI) mobiles, vous d\xe9couvrirez Flutter, le framework open source de Google.",source:"@site/docs\\Sp\xe9cialit\xe9 D\xe9veloppement\\Dev Mobile\\learning.md",sourceDirName:"Sp\xe9cialit\xe9 D\xe9veloppement/Dev Mobile",slug:"/l-essentiel-de-flutter",permalink:"/DevNotes/docs/l-essentiel-de-flutter",editUrl:"https://github.com/ChrisBradford2/DevNotes/edit/main/docs/Sp\xe9cialit\xe9 D\xe9veloppement\\Dev Mobile\\learning.md",tags:[{label:"Mobile",permalink:"/DevNotes/docs/tags/mobile"},{label:"Dart",permalink:"/DevNotes/docs/tags/dart"}],version:"current",frontMatter:{description:"Dans cette formation, qui s'adresse aux d\xe9veloppeurs d'applications et d'interfaces utilisateur (UI) mobiles, vous d\xe9couvrirez Flutter, le framework open source de Google.",slug:"/l-essentiel-de-flutter",tags:["Mobile","Dart"]},sidebar:"tutorialSidebar",previous:{title:"Test",permalink:"/DevNotes/docs/Gestion du SI/Management d'\xe9quipe/test"},next:{title:"Cours 1",permalink:"/DevNotes/docs/dev-mobile"}},d=[{value:"D\xe9marrer avec Flutter",id:"d\xe9marrer-avec-flutter",children:[{value:"Comprendre le r\xf4le de Flutter",id:"comprendre-le-r\xf4le-de-flutter",children:[{value:"Qu&#39;est ce que Flutter ?",id:"quest-ce-que-flutter-",children:[],level:4},{value:"Pourquoi utiliser Flutter ?",id:"pourquoi-utiliser-flutter-",children:[],level:4}],level:3},{value:"Conna\xeetre les pr\xe9requis",id:"conna\xeetre-les-pr\xe9requis",children:[],level:3},{value:"Aborder le langage Dart",id:"aborder-le-langage-dart",children:[{value:"Langage cr\xe9\xe9 par Google",id:"langage-cr\xe9\xe9-par-google",children:[],level:4},{value:"Facile \xe0 apprendre",id:"facile-\xe0-apprendre",children:[],level:4},{value:"Permet de faire du <em>hot reload</em>",id:"permet-de-faire-du-hot-reload",children:[],level:4},{value:"Evite l&#39;affichage saccad\xe9",id:"evite-laffichage-saccad\xe9",children:[],level:4},{value:"Plus besoin de fichiers s\xe9par\xe9s pour le layout",id:"plus-besoin-de-fichiers-s\xe9par\xe9s-pour-le-layout",children:[],level:4}],level:3},{value:"D\xe9velopper des applications mobiles",id:"d\xe9velopper-des-applications-mobiles",children:[],level:3}],level:2},{value:"D\xe9couvrir le language Dart",id:"d\xe9couvrir-le-language-dart",children:[{value:"Appr\xe9hender les variables et les types de donn\xe9es simples",id:"appr\xe9hender-les-variables-et-les-types-de-donn\xe9es-simples",children:[{value:"Commentaires",id:"commentaires",children:[],level:4},{value:"D\xe9clarer une variable",id:"d\xe9clarer-une-variable",children:[],level:4},{value:"Types",id:"types",children:[],level:4},{value:"Exemple",id:"exemple",children:[],level:4},{value:"Type <code>dynamic</code>",id:"type-dynamic",children:[],level:4}],level:3},{value:"Utiliser l&#39;interpolation de string",id:"utiliser-linterpolation-de-string",children:[],level:3},{value:"Aborder les listes",id:"aborder-les-listes",children:[],level:3},{value:"Mettre en \u0153uvre les boucles et les conditions",id:"mettre-en-\u0153uvre-les-boucles-et-les-conditions",children:[],level:3},{value:"\xc9crire des fonctions",id:"\xe9crire-des-fonctions",children:[],level:3},{value:"Comprendre les classes et les constructeurs",id:"comprendre-les-classes-et-les-constructeurs",children:[],level:3},{value:"Assimiler la notion d&#39;h\xe9ritage",id:"assimiler-la-notion-dh\xe9ritage",children:[],level:3},{value:"Employer les mots-cl\xe9s Const et Final",id:"employer-les-mots-cl\xe9s-const-et-final",children:[],level:3},{value:"D\xe9couvrir l&#39;asynchronicit\xe9",id:"d\xe9couvrir-lasynchronicit\xe9",children:[],level:3}],level:2},{value:"Proc\xe9der \xe0 l&#39;installation du SDK Flutter",id:"proc\xe9der-\xe0-linstallation-du-sdk-flutter",children:[{value:"Installer le SDK sur Windows",id:"installer-le-sdk-sur-windows",children:[],level:3},{value:"Installer Android Studio sur Windows",id:"installer-android-studio-sur-windows",children:[],level:3},{value:"Installer le SDK sur macOS",id:"installer-le-sdk-sur-macos",children:[],level:3},{value:"Installer Android Studio et Xcode sur macOS",id:"installer-android-studio-et-xcode-sur-macos",children:[],level:3},{value:"Installer et configurer VS Code",id:"installer-et-configurer-vs-code",children:[],level:3},{value:"Cr\xe9er un \xe9mulateur Android",id:"cr\xe9er-un-\xe9mulateur-android",children:[],level:3},{value:"Installer un simulateur iOS",id:"installer-un-simulateur-ios",children:[],level:3}],level:2},{value:"Utiliser Flutter",id:"utiliser-flutter",children:[{value:"Cr\xe9er un nouveau projet",id:"cr\xe9er-un-nouveau-projet",children:[],level:3},{value:"Comprendre la structure d&#39;un projet",id:"comprendre-la-structure-dun-projet",children:[],level:3},{value:"Appr\xe9hender la notion de widget",id:"appr\xe9hender-la-notion-de-widget",children:[],level:3}],level:2},{value:"Cr\xe9er une interface utilisateur avec Flutter",id:"cr\xe9er-une-interface-utilisateur-avec-flutter",children:[{value:"Employer les widgets MaterialApp, CupertinoApp et Text",id:"employer-les-widgets-materialapp-cupertinoapp-et-text",children:[],level:3},{value:"Aborder Scaffold",id:"aborder-scaffold",children:[],level:3},{value:"Tirer parti des stateless widgets et du hot reload",id:"tirer-parti-des-stateless-widgets-et-du-hot-reload",children:[],level:3},{value:"Composer des layouts : Container et Stack",id:"composer-des-layouts--container-et-stack",children:[],level:3},{value:"Composer des layouts : Row et Column",id:"composer-des-layouts--row-et-column",children:[],level:3},{value:"Composer des layouts : Expanded et la propri\xe9t\xe9 Flex",id:"composer-des-layouts--expanded-et-la-propri\xe9t\xe9-flex",children:[],level:3},{value:"R\xe9cup\xe9rer les images et les ic\xf4nes",id:"r\xe9cup\xe9rer-les-images-et-les-ic\xf4nes",children:[],level:3},{value:"Afficher une liste de widgets gr\xe2ce \xe0 une ListView",id:"afficher-une-liste-de-widgets-gr\xe2ce-\xe0-une-listview",children:[],level:3},{value:"Aborder les stateful widgets",id:"aborder-les-stateful-widgets",children:[],level:3},{value:"Cr\xe9er des boutons et g\xe9rer les actions utilisateur",id:"cr\xe9er-des-boutons-et-g\xe9rer-les-actions-utilisateur",children:[],level:3}],level:2},{value:"R\xe9aliser une application compl\xe8te en Flutter",id:"r\xe9aliser-une-application-compl\xe8te-en-flutter",children:[{value:"D\xe9couvrir le projet",id:"d\xe9couvrir-le-projet",children:[],level:3},{value:"Cr\xe9er les mod\xe8les JSON",id:"cr\xe9er-les-mod\xe8les-json",children:[],level:3},{value:"Consommer l&#39;API",id:"consommer-lapi",children:[],level:3},{value:"Afficher une grille d&#39;images gr\xe2ce \xe0 une GridView",id:"afficher-une-grille-dimages-gr\xe2ce-\xe0-une-gridview",children:[],level:3},{value:"Utiliser un FutureBuilder pour alimenter une GridView",id:"utiliser-un-futurebuilder-pour-alimenter-une-gridview",children:[],level:3},{value:"Cr\xe9er un \xe9cran affichant les d\xe9tails d&#39;une vid\xe9o",id:"cr\xe9er-un-\xe9cran-affichant-les-d\xe9tails-dune-vid\xe9o",children:[],level:3},{value:"Ajouter et utiliser une police d&#39;\xe9criture",id:"ajouter-et-utiliser-une-police-d\xe9criture",children:[],level:3},{value:"Naviguer entre les \xe9crans",id:"naviguer-entre-les-\xe9crans",children:[],level:3},{value:"Proposer un menu pour modifier l&#39;affichage",id:"proposer-un-menu-pour-modifier-laffichage",children:[],level:3},{value:"Assurer la lecture vid\xe9o",id:"assurer-la-lecture-vid\xe9o",children:[],level:3}],level:2}],c={toc:d};function p(e){var i=e.components,t=(0,n.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:i,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lessentiel-de-flutter"},"L'essentiel de Flutter"),(0,a.kt)("p",null,"Vous entendez souvent parler de Flutter, cet outil d\xe9velopp\xe9 par Google et qui permet d'\xe9crire facilement de belles applications multi-platforme ? Alors venez d\xe9couvrir de quoi il s'agit vraiment. Nous verrons pas \xe0 pas ce que Flutter permet de faire, puis je vous guiderez pour que vous appreniez \xe0 d\xe9velopper ais\xe9ment des applications mobiles qui fonctionneront aussi bien sur Android que sur iOS. Si vous souhaitez vous ouvrir au monde de Flutter, et d\xe9couvrir les nombreuses possibilit\xe9s qu'il offre, alors n'attendez plus et commen\xe7ons ensemble cette formation !"),(0,a.kt)("h2",{id:"d\xe9marrer-avec-flutter"},"D\xe9marrer avec Flutter"),(0,a.kt)("h3",{id:"comprendre-le-r\xf4le-de-flutter"},"Comprendre le r\xf4le de Flutter"),(0,a.kt)("h4",{id:"quest-ce-que-flutter-"},"Qu'est ce que Flutter ?"),(0,a.kt)("p",null,"Flutter est un ",(0,a.kt)("em",{parentName:"p"},"toolkit"),", une boite \xe0 outils, qui a \xe9t\xe9 cr\xe9\xe9 par le g\xe9ant du web ",(0,a.kt)("strong",{parentName:"p"},"Google"),". C'est un ",(0,a.kt)("em",{parentName:"p"},"toolkit")," qui est orient\xe9 UI (User Interface) et on comprend par l\xe0 que l'accent est mis sur l'interface utilisateur et que le d\xe9veloppement d'une application Flutter va s'articuler autour de ce concept-l\xe0. Flutter va nous permettre de cr\xe9er des applications multiplateformes puisque l'on va pouvoir d\xe9velopper des applications mobiles pour Android et iOS, des applications web ou encore, des applications de bureau. Pour Windows, pour MacOS ou pour Linux. Enfin, Flutter s'appuie sur le langage ",(0,a.kt)("strong",{parentName:"p"},"Dart"),". Le langage ",(0,a.kt)("strong",{parentName:"p"},"Dart")," est un langage qui a \xe9t\xe9 cr\xe9\xe9 par Google, assez r\xe9cent puisque la premi\xe8re version a \xe9t\xe9 mise \xe0 disposition en fin 2013 ; et ",(0,a.kt)("strong",{parentName:"p"},"Dart")," va reprendre des concepts que l'on retrouve dans d'autres langages qui vont nous permettre justement de pouvoir rapidement rentrer dans le bain. "),(0,a.kt)("h4",{id:"pourquoi-utiliser-flutter-"},"Pourquoi utiliser Flutter ?"),(0,a.kt)("p",null,"L'avantage de Flutter est que l'on va pouvoir r\xe9utiliser toutes ou parties de notre code pour diverses plateformes. Cela aura pour cons\xe9quence de r\xe9duire la mise \xe0 disposition d'une application sur le march\xe9. Par exemple, on va pouvoir tr\xe8s rapidement, mettre notre application sur le Play Store ou sur L'App Store. Mais \xe9galement, on va ne plus avoir besoin de diverses comp\xe9tences. En effet, pour d\xe9velopper sur Android ou iOS, cela retient des comp\xe9tences qui sont diverses. Par exemple sur Android, il va falloir conna\xeetre le langage Java ou Kotlin et sur iOS, il va au moins falloir conna\xeetre le langage Objective-C ou Swift. Avec Flutter, il n'y a plus qu'un seul langage : le langage ",(0,a.kt)("strong",{parentName:"p"},"Dart"),". Enfin, le fait d'avoir un seul code pour plusieurs plateformes va faire que, en cas de probl\xe8me, on n'aura plus qu'un seul code \xe0 maintenir, ce qui va nous faire gagner un temps consid\xe9rable. D'ailleurs, en parlant de temps, Flutter va nous permettre de r\xe9duire le temps de d\xe9veloppement. \xc7a fait r\xe9f\xe9rence au fait que Flutter nous offre des fonctionnalit\xe9s qui vont nous permettre de rapidement tester notre code en voyant l'impact de mani\xe8re quasi instantan\xe9e. En effet, si on prend l'exemple du cas du d\xe9veloppement sur Android, m\xeame si cela \xe9tait am\xe9lior\xe9 au fur et \xe0 mesure des diff\xe9rentes versions, si vous faites une modification dans votre code et que vous souhaitez voir le r\xe9sultat sur un \xe9mulateur ou sur votre t\xe9l\xe9phone, quelques secondes vont s'\xe9couler. Bien s\xfbr, ces secondes vont d\xe9pendre aussi de la configuration de votre ordinateur, mais avec Flutter, le r\xe9sultat sera lui, quasi instantan\xe9. Flutter va nous proposer de bonnes performances. puisque Flutter compile de mani\xe8re native, ce qui va lui conf\xe9rer d'excellentes performances qui sont proches de ce que l'on peut obtenir en faisant du d\xe9veloppement natif. Un des points essentiels \xe0 tout outil de d\xe9veloppement est la documentation qui s'y rattache. Ici, Google a fait un bel effort en proposant une documentation qui est assez riche, mais aussi, on trouvera sur internet de nombreux sites, de nombreux blogs qui traitent de Flutter puisque la communaut\xe9 ne cesse de cro\xeetre. D'ailleurs, de nombreuses entreprises ont adopt\xe9 Flutter. Pour n'en citer que quelques-unes, il y a bien s\xfbr Google avec l'application Google Ads, mais \xe9galement le groupe Ali Baba, eBay ou encore Groupon. Dans cette vid\xe9o, nous avons ainsi vu qu'est-ce que Flutter et quelles sont les raisons qui peuvent nous pousser \xe0 l'utiliser."),(0,a.kt)("h3",{id:"conna\xeetre-les-pr\xe9requis"},"Conna\xeetre les pr\xe9requis"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Comprendre les principes de base de la programmation")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Variables"),(0,a.kt)("li",{parentName:"ul"},"Boucles"),(0,a.kt)("li",{parentName:"ul"},"Fonctions"),(0,a.kt)("li",{parentName:"ul"},"Classes"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Avoir un Mac si d\xe9veloppement IOS")," : Dans le cas o\xf9 vous souhaiteriez d\xe9velopper des applications pour iOS, ou encore pour Mac OS, il est n\xe9cessaire d'avoir un ordinateur de marque Apple. Il est vrai que Flutter permet de faire du multi-plateformes, et que donc par d\xe9finition le code que nous allons \xe9crire est cens\xe9 fonctionner sur iOS. N\xe9anmoins vous ne pourrez pas tester votre code sur votre t\xe9l\xe9phone iPhone, m\xeame sur un simulateur iPhone, ni m\xeame compiler votre application pour iOS si vous \xeates sur Windows ou Linux. C'est une restriction qui est ind\xe9pendante de Flutter, mais seuls les ordinateurs Mac fournissent l'environnement de travail et qui nous permet de compiler des applications Mac OS et iOS et qui offre un simulateur iOS."))),(0,a.kt)("h3",{id:"aborder-le-langage-dart"},"Aborder le langage Dart"),(0,a.kt)("h4",{id:"langage-cr\xe9\xe9-par-google"},"Langage cr\xe9\xe9 par Google"),(0,a.kt)("p",null,"Dart est un langage de programmation orient\xe9 Objet qui a donc \xe9t\xe9 cr\xe9\xe9 par Google et qui depuis sa premi\xe8re version en novembre 2013 n'a cess\xe9 d'\xe9voluer en ajoutant progressivement de nouvelles fonctionnalit\xe9s et en se stabilisant. Le fait que ce soit Google qui ait cr\xe9\xe9 ce langage, fait que Google en conna\xeet non seulement les points forts et les points faibles, mais surtout, au fur et \xe0 mesure que de nouvelles versions de Flutter sont cr\xe9\xe9es, Dart peut \xe0 son tour \xeatre plus ais\xe9ment adapt\xe9. "),(0,a.kt)("h4",{id:"facile-\xe0-apprendre"},"Facile \xe0 apprendre"),(0,a.kt)("p",null,"C'est un langage qui est r\xe9put\xe9 facile \xe0 apprendre puisqu'il reprend de nombreux concepts que l'on retrouve dans les langages les plus utilis\xe9s ; ainsi, si vous avez d\xe9j\xe0 cod\xe9 en Java, en C# ou en JavaScript, vous aurez cette impression de familiarit\xe9 qui vous permettra de rapidement prendre en main Dart."),(0,a.kt)("h4",{id:"permet-de-faire-du-hot-reload"},"Permet de faire du ",(0,a.kt)("em",{parentName:"h4"},"hot reload")),(0,a.kt)("p",null,"Le hot reload est une fonctionnalit\xe9 propos\xe9e par Flutter qui permet de voir de mani\xe8re quasi instantan\xe9e, le r\xe9sultat produit par une modification de votre code sans pour autant avoir besoin de recharger l'application. Ainsi, admettons que vous souhaitiez modifier le titre d'un texte, cela sera imm\xe9diat et les donn\xe9es que vous aviez pr\xe9alablement saisies ne seront pas r\xe9initialis\xe9es."),(0,a.kt)("h4",{id:"evite-laffichage-saccad\xe9"},"Evite l'affichage saccad\xe9"),(0,a.kt)("p",null,"Ce langage va \xe9viter d'avoir un affichage saccad\xe9, en particulier avec les animations, ce qui va fluidifier les applications et am\xe9liorer l'exp\xe9rience utilisateur."),(0,a.kt)("h4",{id:"plus-besoin-de-fichiers-s\xe9par\xe9s-pour-le-layout"},"Plus besoin de fichiers s\xe9par\xe9s pour le layout"),(0,a.kt)("p",null,"Enfin, Dart va \xe9galement nous \xe9viter d'avoir recours \xe0 des fichiers s\xe9par\xe9s pour cr\xe9er l'interface utilisateur en le d\xe9crivant directement dans le code. En d'autres termes, nous n'avons pas besoin d'un fichier XML ou d'un \xab storyboard \xbb pour cr\xe9er nos \xab layouts \xbb. Nous avons ici vu certaines des raisons qui ont pouss\xe9 Google \xe0 faire le choix du langage Dart pour Flutter."),(0,a.kt)("h3",{id:"d\xe9velopper-des-applications-mobiles"},"D\xe9velopper des applications mobiles"),(0,a.kt)("p",null,"Con\xe7u initialement pour permettre de cr\xe9er des Applications mobiles pour Android et iOS, Flutter ne cesse d'\xe9voluer en prenant en charge de plus en plus de syst\xe8mes d'exploitation, que ce soit de mani\xe8re aboutie ou non. Comprenez par l\xe0 que parfois il peut s'agir de premi\xe8res versions de test. Il est ainsi possible de s'essayer \xe0 faire des applications web ou des applications pour ordinateur. N\xe9anmoins, dans cette formation nous allons nous restreindre \xe0 l'utilisation de Flutter dans un cadre de cr\xe9ation d'applications mobiles. Cela ne veut pas dire que tout ce qui est enseign\xe9 n'est pas r\xe9utiisable ailleurs, bien au contraire. Il faudra seulement adapter certaines notions, mais la majorit\xe9 de ce qui est vu est applicable \xe0 tout type d'application faite avec Flutter. Je vous invite donc \xe0 aller visiter le site officiel qui est flutter.dev pour avoir plus d'informations sur les autres plateformes."),(0,a.kt)("h2",{id:"d\xe9couvrir-le-language-dart"},"D\xe9couvrir le language Dart"),(0,a.kt)("h3",{id:"appr\xe9hender-les-variables-et-les-types-de-donn\xe9es-simples"},"Appr\xe9hender les variables et les types de donn\xe9es simples"),(0,a.kt)("p",null,"Nous allons voir quelle est la syntaxe pour d\xe9clarer une variable, et quels sont les types de donn\xe9es simples propos\xe9es par Dart. Je vous invite \xe0 aller sur le site ",(0,a.kt)("a",{parentName:"p",href:"https://dartpad.dev"},"dartpad.dev")," qui est un outil open source nous permettant d'\xe9diter et d'ex\xe9cuter du code Dart directement depuis un navigateur web."),(0,a.kt)("h4",{id:"commentaires"},"Commentaires"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='main.dart'",title:"'main.dart'"},"// Ceci est un commentaire sur ligne simple\n\n/*\n * Ceci est un commentaire\n * \n * sur ligne\n * \n * multple\n */\n")),(0,a.kt)("h4",{id:"d\xe9clarer-une-variable"},"D\xe9clarer une variable"),(0,a.kt)("p",null,"La syntaxe pour d\xe9clarer une variable est la suivante :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='main.dart'",title:"'main.dart'"},"type nomVar;\n\n//ou\n\ntype nomVar = valeur;\n")),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"En ",(0,a.kt)("strong",{parentName:"p"},"Dart"),", toute instruction doit se terminer par un point virgule ",(0,a.kt)("inlineCode",{parentName:"p"},";")," ."))),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"num (int / double);"),(0,a.kt)("li",{parentName:"ul"},"bool"),(0,a.kt)("li",{parentName:"ul"},"String")),(0,a.kt)("h4",{id:"exemple"},"Exemple"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='main.dart'",title:"'main.dart'"},"int age;\nint age2 = 25;\n\ndouble = 1.5;\n\nbool IsMarried = false;\n\nString s1 = \"Bonjour l'ami\";\nString s2 = 'Bonjour l\\'ami';\n\nString msg = 'Hello world';\nprint(msg); //affiche la vaiable msg dans la console.\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title='console'",title:"'console'"},"Hello world\n")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Pour utiliser des guillements \xe0 l'int\xe9rieur des guillements ou des caract\xe8re sp\xe9ciaux, il faut mettre un backslash devant le caract\xe8re : ",(0,a.kt)("inlineCode",{parentName:"p"},"\\' , \\\" , \\\\")))),(0,a.kt)("p",null,"Jusqu'\xe0 pr\xe9sent, j'ai d\xe9fini les types, mais je peux aussi utiliser le mot cl\xe9 ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," qui va me permettre de d\xe9duire automatiquement le type de la variable. Admettons, si j'ai ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," a et que je initialise avec la valeur 5, a sera automatiquement d\xe9duit comme \xe9tant un entier que l'on peut voir ici."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='main.dart'",title:"'main.dart'"},"var a = 5; //var d\xe9tecte automatiquement quel type utiliser\n")),(0,a.kt)("p",null,"Si je cr\xe9e une variable b et que je l'initialise avec la valeur ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", b sera bien un ",(0,a.kt)("inlineCode",{parentName:"p"},"bool\xe9en"),". Par contre, cela ne me permet pas de changer le type de b. Si je souhaite \xe0 pr\xe9sent que b est de type ",(0,a.kt)("inlineCode",{parentName:"p"},"bool\xe9en"),", lui affecter la valeur 25, cela n'est pas possible puisque 25 est de type entier. Si je souhaite faire cela, j'utiliserais le type ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic"),"."),(0,a.kt)("h4",{id:"type-dynamic"},"Type ",(0,a.kt)("inlineCode",{parentName:"h4"},"dynamic")),(0,a.kt)("p",null,"Le type ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," va effectivement nous permettre d'utiliser une variable tout en lui modifiant son type. Je peux l'initialiser \xe0 5, et ensuite, lui attribuer une valeur ",(0,a.kt)("inlineCode",{parentName:"p"},"bool\xe9en"),", ou encore, une cha\xeene de caract\xe8res.\nDonc, la diff\xe9rence entre var est ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic"),", eh bien, que var va tout simplement d\xe9duire le type, tandis que ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," va nous permettre d'utiliser pour une seule variable diff\xe9rents types durant toute la dur\xe9e de vie de la variable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='main.dart'",title:"'main.dart'"},'dynamic x = 5;\nx = true;\nx = "Hello";\n')),(0,a.kt)("h3",{id:"utiliser-linterpolation-de-string"},"Utiliser l'interpolation de string"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="main.dart"',title:'"main.dart"'},"int age = 21;\n\nprint('Vous avez '+ age.toString() + ' ans !');\n//Le + est un op\xe9rateur de concat\xe9nation, c'est-\xe0-dire qu'il va permettre de mettre bout \xe0 bout des cha\xeenes de caract\xe8res.\n//Le toString() converti le type en string\n\nprint('Vous avez $age ans !');\n//La fa\xe7on recommand\xe9e par Dart est d'ajouter un $ avant la variable.\n\nprint('Dans 10 ans, vous aurez ${age + 10} ans !');\n//Les accolades permettent d'effectuer des op\xe9rations.\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="console"',title:'"console"'},"Vous avez 21 ans !\nVous avez 21 ans !\nDans 10 ans, vous aurez 31 ans !\n")),(0,a.kt)("h3",{id:"aborder-les-listes"},"Aborder les listes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='main.dart'",title:"'main.dart'"},"List eventNumbers = [2, 4, 6, 0, 8, 2];\nprint (eventNumbers[2]); //Affichier un \xe9l\xe9ment \xe0 une posiiton donn\xe9e.\n  \nList<int> oddNumbers = [1, 3, 5];\noddNumbers.add (7); //ajoute un nombre \xe0 la liste\nprint(oddNumbers); //affiche la liste\nprint(oddNumbers.length); //affiche la longueur de la liste\n\n//spead operator\nvar newList =[...oddNumbers, ...eventNumbers, 8, 9];\nprint(newList); //Affiche la concat\xe9nation des deux pr\xe9c\xe9dentes listes plus le nombre 8 et 9\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title='console'",title:"'console'"},"6\n\n[1, 3, 5, 7]\n4\n\n[1, 3, 5, 7, 2, 4, 6, 0, 8, 2, 8, 9]\n")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Une liste d\xe9bute toujours par l'indice z\xe9ro."))),(0,a.kt)("h3",{id:"mettre-en-\u0153uvre-les-boucles-et-les-conditions"},"Mettre en \u0153uvre les boucles et les conditions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='main.dart'",title:"'main.dart'"},"void main() {\n  var user = 'Chris' ;\n  if (user != null) {\n    print('Bienvenue $user');\n  } else {\n    print('Bienvenue visiteur');\n  }\n  \n  print('Bienvenue ${user ?? 'visiteur'}');\n  \n  if (user == 'Chris')\n    print('Acc\xe8s admin');\n  \n  //--------------\n  for (var i = 0; i <= 5; i++){\n    print('$i');\n  }\n  \n  var players = ['John', 'Martin', 'M\xe9lissa'];\n  for (var i = 0; i < players.length; i++) {\n    print(players[i]);\n  }\n  \n  for (var player in players)\n    print(player);\n  \n  //----------\n  \n  var a = 10;\n  while (a > 5) {\n    a = a - 1; //a--\n  }\n  print(a);\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title='console'",title:"'console'"},"Bienvenue Chris\nBienvenue Chris\nAcc\xe8s admin\n0\n1\n2\n3\n4\n5\nJohn\nMartin\nM\xe9lissa\nJohn\nMartin\nM\xe9lissa\n5\n")),(0,a.kt)("h3",{id:"\xe9crire-des-fonctions"},"\xc9crire des fonctions"),(0,a.kt)("h3",{id:"comprendre-les-classes-et-les-constructeurs"},"Comprendre les classes et les constructeurs"),(0,a.kt)("p",null,"Nous allons voir comment cr\xe9er des classes et comment les utiliser. Je vais commencer par cr\xe9er une nouvelle classe que j'appellerai Person Pour ce faire, j'utilise le mot cl\xe9 class suivi du nom de ma classe. Dans son corps, je vais mettre une propri\xe9t\xe9 que j'appellerai name et d\xe9finir mon constructeur. Un constructeur s'\xe9crit en mettant le nom de la classe avec des param\xe8tres, donc, des parenth\xe8ses et un corps. Ici, je vais initialiser ma propri\xe9t\xe9 name, je vais donc mettre var name ou tout autre nom et je pourrai initialiser ma propri\xe9t\xe9 en faisant this.name pour y r\xe9f\xe9rence, est \xe9gal \xe0 mon param\xe8tre. Dart nous permet aussi de simplifier cette \xe9criture. Je peux ainsi supprimer le corps de mon constructeur, mettre un point virgule, et mettre directement \xab this.name \xbb. Si l'on a besoin d'\xe9crire plusieurs constructeurs, il y a la possibilit\xe9 de cr\xe9er des constructeurs nomm\xe9s. Il suffit alors d'\xe9crire le nom du constructeur, comme ici Person, suivi d'un point, et du nom qui sera donn\xe9 \xe0 ce nouveau constructeur. Je vais donc mettre fromPerson puisque ce constructeur-l\xe0 me permettra de cr\xe9er une personne \xe0 partir d'une autre. Dans le corps, je ferai tout simplement name, donc, ma propri\xe9t\xe9 est \xe9gale \xe0 p. Et j\u2019acc\xe9derai \xe0 la propri\xe9t\xe9 de ce param\xe8tre en mettant \xab p.name. \xbb. L\xe0 aussi, Dart me permet de simplifier l'\xe9criture. En effet, si je souhaite initialiser des propri\xe9t\xe9s, je peux reprendre cette ligne-l\xe0, la couper, et venir \xe0 cet endroit-l\xe0 et mettre deux points et faire l'affectation. Si jamais j'avais d'autres propri\xe9t\xe9s \xe0 initialiser, je pourrais les s\xe9parer avec des virgules. Aussi, dans le cas o\xf9 le corps de mon constructeur est vide, je peux le supprimer et terminer par un point virgule. Enfin, si j'ai encore deux constructeurs et qu'\xe0 l'int\xe9rieur, admettons, j'ai une instruction comme \xab print('fin du constructeur') \xbb, il faut savoir que tout ce qui sera apr\xe8s les deux points, comme ici, sera initialis\xe9 avant le corps du constructeur. Je vais terminer avec l'\xe9criture d'une m\xe9thode. Je rappelle qu'une m\xe9thode est tout simplement une fonction au sein d'une classe, je vais donc cr\xe9er la m\xe9thode speak qui va afficher un message de pr\xe9sentation. \xab Bonjour je m'appelle \xbb, et je mets $name pour faire r\xe9f\xe9rence \xe0 la propri\xe9t\xe9. Je vais maintenant instancier ma classe en cr\xe9ant un premier objet. Donc, je mets Person qui est le type de ma classe, suivi du nom de mon objet. Ici, je mettrais p1 et je mettrai \xab new Person() \xbb. Vu que j'ai besoin de passer un param\xe8tre, je mettrai un pr\xe9nom, admettons Sylvie. Le mot cl\xe9 new est facultatif. Je ne suis pas oblig\xe9 de le mettre, et d'ailleurs, il est recommand\xe9 de ne plus le mettre. Je vais ainsi pouvoir acc\xe9der \xe0 la propri\xe9t\xe9 name en faisant p1.name. Si je souhaite l'afficher, je ferais \xab print(p1.name) \xbb. J'en profite pour pr\xe9ciser qu'en Dart, il n'y a pas de mots cl\xe9s tels que private, public ou protected. Si jamais je souhaitais rendre la propri\xe9t\xe9 name priv\xe9e, je lui mettrai un underscore, et cela aurait pour cons\xe9quence de ne le rendre visible qu'au sein de la m\xeame librairie. En d'autres termes, qu'au sein du m\xeame fichier, sachant qu'en Dart, dans un seul fichier, on peut inclure plusieurs classes. Je vais maintenant cr\xe9er une seconde personne, Person p2, et je vais faire appel \xe0 mon constructeur nomm\xe9, donc, fromperson et je vais passer en param\xe8tre p1. Enfin, je vais faire appel \xe0 la m\xe9thode speak. Si j'ex\xe9cute mon code, j'ai bien le premier print, Sylvie, la construction de ma seconde personne avec le message fin du constructeur, et enfin, le message \xe0 travers p2.speak o\xf9 j'affiche \xab Bonjour je m'appelle Sylvie \xbb. Nous avons ainsi vu comment nous pouvons cr\xe9er des classes, cr\xe9er des constructeurs et des constructeurs nomm\xe9s, des propri\xe9t\xe9s, des m\xe9thodes, et comment instancier des classes."),(0,a.kt)("h3",{id:"assimiler-la-notion-dh\xe9ritage"},"Assimiler la notion d'h\xe9ritage"),(0,a.kt)("p",null,"Abordons la notion d'h\xe9ritage. Nous avons ici une classe Person qui a une propri\xe9t\xe9 name, un constructeur qui permet d'initialiser cette propri\xe9t\xe9 et enfin, une m\xe9thode qui permet de pr\xe9senter la personne. Je vais cr\xe9er une nouvelle classe que j'appellerais \xab Employee \xbb Un employ\xe9 \xe9tant une personne, je vais pouvoir \xe9tendre la classe Person, pour cela, j'utilise le mot-cl\xe9 \xab extends \xbb suivi du nom de la classe \xe0 \xe9tendre. J'ajouterai une propri\xe9t\xe9 que j'appellerais \xab jobName \xbb et qui me permettra de conna\xeetre le m\xe9tier de l'employ\xe9. Je vais \xe0 nouveau cr\xe9er un constructeur qui permettra d'initialiser jobName. \xc9tant donn\xe9 qu'un employ\xe9 est une personne, cet employ\xe9-l\xe0 aura forc\xe9ment un nom. Je demanderai qu'on me le passe en param\xe8tre, je mettrai var name et pour pouvoir transmettre cette information-l\xe0 au constructeur de la classe Person, je mettrai deux points et j'utiliserai le mot-cl\xe9 \xab super \xbb qui prendra en param\xe8tre name. Maintenant, si je cr\xe9e une instance de ma classe Employee, je vais lui passer le jobName, ici, je mettrai \xab D\xe9veloppeur \xbb et le pr\xe9nom : Dimitri. \xc9tant donn\xe9 que l'employ\xe9 est une personne, je vais pouvoir faire appel \xe0 cette m\xe9thode speak. Je vais donc pouvoir faire e.speak. Si j'ex\xe9cute mon code, j'aurai bien : \xab Bonjour, je m'appelle Dimitri. \xbb Maintenant, si je souhaite red\xe9finir ma m\xe9thode speak, si je souhaite la personnaliser pour un employ\xe9, je viendrai dans la classe Employee, j'utiliserai l'annotation override qui va me permettre d'indiquer au compilateur que la modification que je vais faire est intentionnelle et je reprendrai la m\xe9thode que je vais copier ici et coller dans la classe Employee pour apporter une modification : \xab Bonjour, je m'appelle $name et je travaille en tant que $jobName. \xbb Si maintenant, je r\xe9-ex\xe9cute mon code, j'aurai bien : \xab Bonjour, je m'appelle Dimitri et je travaille en tant que d\xe9veloppeur. \xbb Nous avons vu ici comment cr\xe9er une classe qui h\xe9rite d'une autre classe, comment utiliser le mot-cl\xe9 \xab super \xbb pour faire appel au constructeur de la classe parente et enfin, nous avons vu comment red\xe9finir une m\xe9thode."),(0,a.kt)("h3",{id:"employer-les-mots-cl\xe9s-const-et-final"},"Employer les mots-cl\xe9s Const et Final"),(0,a.kt)("p",null,"Dart propose deux fa\xe7ons de d\xe9finir des constantes que je vous propose de d\xe9couvrir dans cette vid\xe9o. Pour \xe9crire une variable jusqu'\xe0 pr\xe9sent, on faisait var a, admettons que je lui donne la valeur cinq. Je peux par la suite, modifier la valeur de a et lui attribuer la valeur 70. Les deux fa\xe7ons propos\xe9es par Dart pour d\xe9finir des constantes sont \xe0 travers l'utilisation des mots-cl\xe9s \xab const \xbb et \xab final \xbb. Si je fais const b = 5, bien \xe9videment, cela fonctionne, mais je ne pourrai pas modifier b par la suite. Donc, cette ligne de code me g\xe9n\xe9rera une erreur. Je vais donc la mettre en commentaire. Pareillement, pour final, si je mets c = 5, \xe0 la d\xe9finition, cela fonctionnera, mais je ne pourrai pas faire de modification. J'aurai un message d'erreur. Voil\xe0 pour les points communs entre const et final. Maintenant, voyons les diff\xe9rences. La principale diff\xe9rence est que const doit avoir des valeurs connues \xe0 la compilation. Alors que final peut avoir des valeurs qui ne seront connues que lors de l'ex\xe9cution. Je vais prendre un exemple : pour avoir l'heure courante, je peux faire appel \xe0 DateTime .now. Si je l'utilise avec un const, const now = DateTime.now, cela va me g\xe9n\xe9rer \xe0 nouveau une erreur, \xe9tant donn\xe9 que l'heure ne sera connue qu'\xe0 l'ex\xe9cution de notre programme et non \xe0 sa compilation. En revanche, si je fais final now = DateTime.now, tout fonctionnera. Aussi, je pourrai faire \xab const abis = 5 \xbb, cela fonctionne bien \xe9videment, mais je ne pourrai pas faire const abis est \xe9gal \xe0 a puisque a, du moins son contenu, ne sera connu que lors de l'ex\xe9cution du programme. Donc l\xe0 aussi, ce n'est pas possible, alors que \xe7a fonctionnerait avec le final. Enfin, voyons l'utilisation de const et de final avec des collections. On va, pour illustrer cela, utiliser une liste. Donc, je vais faire final list 1 = 1 et 2 et je vais faire const list 2 = 3 et 4, donc nous avons deux listes. La premi\xe8re \xe9tant une liste final et la seconde, une liste const. Je pourrais faire ainsi list 1 crochets 0 et je pourrais en modifier le contenu. Si je fais print list 1, on voit que le contenu de ma liste a \xe9t\xe9 modifi\xe9. Puisqu'une list final a son contenu qui n'est pas final. Par contre, une list const a son contenu qui est const. Ce qui veut dire par l\xe0, que je ne peux pas faire list 2 et modifier le contenu. Nous avons donc vu dans cette vid\xe9o, les deux mots-cl\xe9s \xab final \xbb et \xab const \xbb, leurs ressemblances, mais surtout leurs diff\xe9rences."),(0,a.kt)("h3",{id:"d\xe9couvrir-lasynchronicit\xe9"},"D\xe9couvrir l'asynchronicit\xe9"),(0,a.kt)("p",null,"Je vous propose de d\xe9couvrir comment g\xe9rer du code asynchrone. J'ai pr\xe9alablement pr\xe9par\xe9 du code qui est assez simple o\xf9 j'affiche le message d\xe9but du code, j'ai ensuite l'appel d'une fonction add qui permet d'additionner deux nombres donc ici 2 + 2. Le r\xe9sultat sera stock\xe9 dans une variable res que j'affiche ensuite et je termine par afficher le message fin du code. Si j'ex\xe9cute, je devrais avoir d\xe9but du code 2 + 2 = 4 et le message fin du code. \xc0 pr\xe9sent, nous allons r\xe9\xe9crire cette fonction-l\xe0 en simulant une longue op\xe9ration. Admettons que le calcul se fait sur un serveur et qu'il faille \xe0 peu pr\xe8s cinq secondes pour obtenir le r\xe9sultat. Donc, je prends int a, int b et cette fois-ci, je vais mettre ma dur\xe9e : duration, je pr\xe9cise que je prendrai cinq secondes. Et j'appellerai Future.delayed. L\xe0, je vais m'arr\xeater juste pour pr\xe9ciser ce qu'est un Future. Un Future va \xeatre utilis\xe9 pour repr\xe9senter une potentielle valeur, m\xeame une erreur et cette valeur sera disponible, non pas imm\xe9diatement, mais dans le futur. delayed va prendre deux param\xe8tres : la dur\xe9e et ce qu'on appelle un \xab callback \xbb, une fonction qui sera appel\xe9e une fois que le d\xe9lai sera \xe9coul\xe9. J'utiliserai une fonction anonyme, une fonction anonyme, c'est tout simplement une fonction qui n'a pas de nom. Ici, on retrouve les parenth\xe8ses pour les param\xe8tres et le corps de la fonction entre accolades. Une fois que les cinq secondes seront \xe9coul\xe9es, j'afficherai un message : fin des 5 secondes. Et enfin, je retournerai mon addition. Je vais modifier l'appel et ex\xe9cuter le nouveau code. On a le d\xe9but du code, quatre, fin du code et ensuite, on a la fin des cinq secondes, \xe7a ne correspond pas \xe0 ce que l'on souhaite puisque nous, nous voulons que le r\xe9sultat de l'addition se fasse apr\xe8s cinq secondes. Je vais donc ajouter le mot-cl\xe9 \xab await \xbb qui va permettre d'indiquer que le compilateur doit attendre la fin de cette instruction avant de passer \xe0 la ligne suivante. Le fait d'utiliser await me pousse \xe0 utiliser le mot-cl\xe9 \xab async \xbb qui doit \xeatre mis juste avant le corps de la fonction. Enfin, Dart me met un message d'erreur puisque je dois pr\xe9ciser que je ne retourne pas un entier imm\xe9diatement, mais un entier dans l'avenir, donc en utilisant un Future. Si je r\xe9-ex\xe9cute mon code, j'aurai donc d\xe9but du code, instance d'un Future, la fin du code et la fin des cinq secondes. En gros, ce qui s'est pass\xe9, c'est que j'ai r\xe9cup\xe9r\xe9 imm\xe9diatement un Future dont je sais que la valeur soit un entier, j'ai la fin du code qui s'est ex\xe9cut\xe9e, mais la valeur retourn\xe9e sera perdue. Pour la r\xe9cup\xe9rer, j'ai deux fa\xe7ons de faire : soit de mani\xe8re asynchrone, en mettant res.then pour d\xe9baller mon Future qui prendra l\xe0 aussi une fonction anonyme. Cette fonction prendra un param\xe8tre qui sera le r\xe9sultat de mon addition et que j'afficherai, donc je peux mettre print value. Si je r\xe9-ex\xe9cute, j'ai donc le d\xe9but du code, \xe0 nouveau \xe0 cause de ce print res, l'instance du Future, mais cette fois-ci, une fois les cinq secondes pass\xe9es, j'ai bien le r\xe9sultat. Si je souhaitais avoir un r\xe9sultat de mani\xe8re s\xe9quentielle, je pourrais mettre ce code-l\xe0 en commentaire et \xe0 nouveau, faire appel \xe0 await, et mettre la fonction main en async en ex\xe9cutant ; j'ai donc le d\xe9but du code et cinq secondes qui doivent s'\xe9couler, et j'ai enfin le r\xe9sultat et la fin du code. Nous avons ainsi vu ce que sont les Future, comment utiliser les mots-cl\xe9s \xab await \xbb et \xab async \xbb."),(0,a.kt)("h2",{id:"proc\xe9der-\xe0-linstallation-du-sdk-flutter"},"Proc\xe9der \xe0 l'installation du SDK Flutter"),(0,a.kt)("h3",{id:"installer-le-sdk-sur-windows"},"Installer le SDK sur Windows"),(0,a.kt)("p",null,"Dans cette vid\xe9o, nous allons voir comment installer le SDK Flutter sur Windows. Pour cela, nous allons aller sur le site officiel \xab flutter.dev \xbb et cliquer sur Get started. Il faudra ici s\xe9lectionner, bien \xe9videmment, la plate-forme Windows et sur la nouvelle page, on aura toutes les informations permettant l'installation du SDK. Il faudra veiller au pr\xe9alable \xe0 avoir suffisamment d'espace disque et d'avoir les deux outils suivants : Windows PowerShell 5 ou version plus r\xe9cente, ce qui est d\xe9j\xe0 le cas sur Windows 10 et Git pour Windows. Git est ce qu'on appelle un syst\xe8me de contr\xf4le de versions qui va, dans le cas pr\xe9sent, nous permettre de pouvoir mettre \xe0 jour Flutter, ou encore pouvoir tester les versions beta qui sont propos\xe9es. Si vous souhaitez en savoir plus sur cet outil, je vous invite \xe0 consulter le catalogue de LinkedIn Learning. Pour savoir si Git est install\xe9 sur votre machine, il va falloir ouvrir une invite de commande. Vous allez faire une recherche sur les trois lettres cmd, et valider. Ici, vous aurez ce que l'on appelle un terminal et vous taperez la commande git. Si, comme moi, la commande n'est pas reconnue, c'est que Git n'est pas install\xe9. Pour rem\xe9dier \xe0 cela, vous allez retourner sur le site officiel et cliquer sur Git for Windows. Dans cette nouvelle page, vous s\xe9lectionnerez le bon ex\xe9cutable en fonction de l'architecture de votre machine. Une fois le fichier t\xe9l\xe9charg\xe9, vous allez l'installer de mani\xe8re classique. Alors, je vais aller dans mon r\xe9pertoire de t\xe9l\xe9chargement et double cliquer sur l'ex\xe9cutable. Je vais accepter tous les param\xe8tres par d\xe9faut. Bien \xe9videmment, vous pouvez customiser \xe0 votre bon vouloir. Une fois le t\xe9l\xe9chargement termin\xe9, il faudra veiller \xe0 bien refermer la pr\xe9c\xe9dente invite de commande. Je vais donc la cl\xf4turer et ouvrir une nouvelle invite. En effet, sur la pr\xe9c\xe9dente, les modifications n'ont pas \xe9t\xe9 prises en consid\xe9ration. Je vais maintenant taper git et notre commande est \xe0 pr\xe9sent reconnue. On va continuer avec l'installation du SDK Flutter. Je vais retourner sur le site officiel, donc, je reviens en arri\xe8re, et je vais \xe0 pr\xe9sent descendre jusqu'au bouton flutter_windows. Ce bouton nous permettra de t\xe9l\xe9charger un fichier zip contenant la derni\xe8re version stable du SDK Flutter. Une fois le fichier zip t\xe9l\xe9charg\xe9 et d\xe9zipp\xe9, vous serez en pr\xe9sence d'un r\xe9pertoire flutter. Vous pourrez installer celui-ci sur votre disque dur. Il est recommand\xe9 de l'installer \xe0 la racine. C'est ce que j'ai fait. Maintenant, si j'ouvre \xe0 nouveau mon terminal et que je tape flutter, la commande est malheureusement non reconnue. On va faire en sorte que cette commande le soit \xe0 pr\xe9sent. Pour ce faire, je vais retourner sur mon explorateur de fichiers, s\xe9lectionner mon r\xe9pertoire flutter, puis mon r\xe9pertoire bin. Je vais copier le chemin. Maintenant, je vais faire une recherche sur les variables d'environnement et je vais s\xe9lectionner Modifier les variables d'environnement syst\xe8me. \xc0 pr\xe9sent, je cliquerai sur le bouton Variables d'environnement, je s\xe9lectionnerai la variable Path et je cliquerai sur le bouton Modifier. J'ai un ancien flutter que je vais supprimer, mais je pourrais en cr\xe9er un nouveau et je collerai le chemin que j'ai copi\xe9 pr\xe9c\xe9demment. Je validerai en cliquant sur OK et je fermerai toutes les autres fen\xeatres. \xc0 pr\xe9sent, je vais \xe0 nouveau fermer mon pr\xe9c\xe9dent terminal et en ouvrir un nouveau. Si je tape la commande flutter, celle-ci est maintenant reconnue. Nous avons ainsi vu comment installer le SDK flutter et comment installer Git."),(0,a.kt)("h3",{id:"installer-android-studio-sur-windows"},"Installer Android Studio sur Windows"),(0,a.kt)("p",null,"Une fois le SDK Flutter install\xe9, nous allons ouvrir un nouveau terminal et taper la commande \xab flutter doctor \xbb. Cette commande va veiller \xe0 ce que tous les outils n\xe9cessaires \xe0 l'utilisation de Flutter soient bien install\xe9s. En effet, nous voyons ici en rouge que le SDK Flutter n'a pas \xe9t\xe9 d\xe9tect\xe9. On peut l'installer par le biais d'Android Studio et on va d'ailleurs copier l'adresse qui nous est propos\xe9e et ouvrir un navigateur web. Je vais copier-coller l'adresse. Il me suffira \xe0 pr\xe9sent de cliquer sur le bouton Download Android Studio. Une fois le t\xe9l\xe9chargement termin\xe9, vous serez en pr\xe9sence d'un fichier d'installation que l'on va lancer. Je vais accepter et je vais accepter tous les param\xe8tres par d\xe9faut. Ensuite, je cliquerai sur Next et je laisserai Start Android Studio. Il me suffira de l'afficher, je laisse tel quel. Sur cette nouvelle fen\xeatre, je cliquerai sur Next, je prendrai une installation de type standard, je prendrai un th\xe8me soit sombre, soit clair ; pour ma part, je laisserai clair et enfin, j'accepterai tous les composants qui doivent \xeatre t\xe9l\xe9charg\xe9s. Une fois tous les composants t\xe9l\xe9charg\xe9s, je peux cliquer sur Finish. Ici, j'ai la fen\xeatre de bienvenue d'Android Studio. Je vais cliquer sur Configure et s\xe9lectionner Plugins. Dans cette nouvelle fen\xeatre, je vais taper \xab Flutter \xbb. Je pourrai ainsi cliquer sur le bouton Install, je vais accepter et il me sera \xe9galement propos\xe9 d'installer le plugin Dart. Je vais l\xe0 aussi accepter. Quand l'installation est termin\xe9e, je serai invit\xe9 \xe0 red\xe9marrer Android Studio pour appliquer les changements. Je vais retourner sur l'invite de commandes et je vais maintenant taper \xab flutter doctor \xbb. On voit \xe0 pr\xe9sent que le SDK Android, par rapport \xe0 tout \xe0 l'heure, a \xe9t\xe9 install\xe9. Il y a parfois un bug qui appara\xeet, \xe0 savoir que m\xeame si on a install\xe9 les plugins Flutter et Dart, ceux-ci ne sont pas d\xe9tect\xe9s par Flutter Doctor. Le plus important est que l'on ait les plugins qui s'affichent, du moins qu'\xe0 l'invite, que dans la fen\xeatre de bienvenue d'Android Studio, on ait cette ligne Create New Flutter Project, donc la possibilit\xe9 de cr\xe9er un nouveau projet Flutter. Cela signifie que les plugins ont bien \xe9t\xe9 install\xe9s. Un dernier point qui est int\xe9ressant est qu'il faut accepter les licences Android. Pour ce faire, on va copier la ligne de commande suivante et la coller. Il suffit de valider et ici, je devrai accepter les diff\xe9rentes licences en appuyant sur \xab Y \xbb pour \xab Yes \xbb. Si je relance Flutter Doctor, \xe0 pr\xe9sent, tous les outils n\xe9cessaires pour pouvoir d\xe9velopper sur Flutter ont \xe9t\xe9 install\xe9s. Dans cette vid\xe9o, nous avons vu comment installer Android Studio, le SDK Android, comment utiliser Flutter Doctor et enfin, comment installer les plugins Flutter et Dart."),(0,a.kt)("h3",{id:"installer-le-sdk-sur-macos"},"Installer le SDK sur macOS"),(0,a.kt)("p",null,"Dans cette nouvelle vid\xe9o, nous allons voir comment installer le SDK Flutter sur macOS. Pour cela, je vous invite \xe0 aller sur le site officiel Flutter.dev et cliquer sur Get started. Ici, nous s\xe9lectionnerons bien \xe9videmment macOS et nous aurons une page nous donnant toutes les informations pour pouvoir installer le SDK. Il faudra bien veiller au pr\xe9alable \xe0 avoir suffisamment d'espace disque disponible et aussi tous les outils qui sont list\xe9s ici. Vous cliquerez ensuite sur le bouton flutter_macos, qui vous chargera un fichier zip contenant la derni\xe8re version stable du SDK Flutter et une fois le fichier t\xe9l\xe9charg\xe9 et d\xe9zipp\xe9, vous obtiendrez un r\xe9pertoire Flutter. Vous pourrez ensuite le d\xe9placer dans le r\xe9pertoire de votre choix. Pour ma part, je l'ai mis en tant que sous-r\xe9pertoire du r\xe9pertoire SDK. Vous ouvrirez ensuite un nouveau terminal. Pour ce faire, vous pouvez cliquer sur la recherche Spotlight et taper \xab terminal \xbb. Dans la nouvelle console, vous taperez la commande Flutter. On voit ici que la commande n'est pas reconnue. L'objectif \xe0 pr\xe9sent est de faire en sorte qu'elle le soit. Nous allons \xe0 pr\xe9sent revenir sur le site officiel et on va descendre jusqu'\xe0 la partie qui s'appelle \xab Update your path \xbb. La ligne qui nous int\xe9ressera sera celle-ci, qui se d\xe9compose en deux parties : donc, un export du path et le chemin jusqu'\xe0 notre sous-r\xe9pertoire bin, qui est inclus dans le r\xe9pertoire flutter. Je vais donc copier la premi\xe8re partie et retourner sur le terminal. Je vais copier cette partie-l\xe0 et je vais \xe0 pr\xe9sent devoir indiquer le chemin jusqu'au sous-r\xe9pertoire bin. Pour ce faire, je vais aller dans le Finder, cliquer sur Flutter et faire un clic droit sur le r\xe9pertoire bin. Ici, je cliquerai sur Copier \xab bin \xbb. Je retourne sur le terminal et colle ce que j'ai copi\xe9. Je veillerai bien au pr\xe9alable \xe0 supprimer l'espace qui a \xe9t\xe9 ajout\xe9 et \xe0 rajouter un double guillemet. Je valide \xe0 pr\xe9sent en appuyant sur la touche Entr\xe9e. Si je tape maintenant la commande Flutter, celle-ci est bien reconnue. Il est possible que, tout comme moi, vous utilisiez le shell Zsh. Dans ce cas-l\xe0, si vous fermez le terminal et qu'\xe0 nouveau, vous ouvriez une nouvelle fen\xeatre, en tapant Flutter, la commande n'est plus reconnue. Pour pallier \xe0 cela, il va falloir recopier la ligne pr\xe9c\xe9dente ; je vais donc la s\xe9lectionner et la copier, je vais la supprimer. Vous allez taper \xab vim $HOME/.zshrc \xbb. Ici, vous appuierez sur la touche \xab I \xbb de votre clavier pour passer en mode insertion et vous ferez Cmd + V pour copier ce que vous avez copi\xe9. Enfin, vous terminerez en appuyant sur la touche Echap, \xab : \xbb et vous terminerez en tapant \xab wq \xbb qui appara\xeet en bas de l'\xe9cran. Vous validerez en appuyant sur Entr\xe9e. \xc0 pr\xe9sent, si je relance le terminal, je vais quitter, relancer une nouvelle fen\xeatre et si je tape \xab flutter \xbb, ma commande est maintenant reconnue. Nous avons ainsi vu comment installer le SDK Flutter sur macOS."),(0,a.kt)("h3",{id:"installer-android-studio-et-xcode-sur-macos"},"Installer Android Studio et Xcode sur macOS"),(0,a.kt)("p",null,"Dans cette vid\xe9o, nous allons voir comment installer les diff\xe9rents outils n\xe9cessaires \xe0 l'utilisation du SDK Flutter sur MacOS. On va commencer par ouvrir un terminal et on tapera la commande flutter doctor. Cette commande va veiller \xe0 ce que tous les outils n\xe9cessaires \xe0 l'utilisation de Flutter sont bien install\xe9s. En effet, nous voyons ici en rouge que, par exemple, les \xe9l\xe9ments permettant de d\xe9velopper sur Android ne sont pas pr\xe9sents. Ainsi, le SDK Android n'a pas \xe9t\xe9 d\xe9tect\xe9. On peut l'installer par le biais de Android Studio qui est l'environnement de d\xe9veloppement pour Android, et on nous propose une adresse que l'on va copier et on va ouvrir le lien dans un navigateur web. On pourra ainsi t\xe9l\xe9charger en cliquant sur Download Android Studio, l'IDE. C'est ce que je vous invite \xe0 faire, et une fois le t\xe9l\xe9chargement termin\xe9, vous aurez un fichier d'installation. Je vais donc l'ouvrir. Il suffira de d\xe9placer Android Studio vers le r\xe9pertoire Applications. Une fois le d\xe9placement d'Android Studio termin\xe9, nous fermerons cette fen\xeatre et nous pourrons utiliser Android Studio. Je vais donc faire une recherche sur Android Studio et l'ouvrir. Je vais bien \xe9videmment accepter l'ouverture du fichier et j'aurais maintenant une nouvelle fen\xeatre. Ici, je vais accepter de ne pas importer les param\xe8tres par d\xe9faut dans le sens o\xf9 je n'avais pas au pr\xe9alable d\xe9j\xe0 Android Studio d'install\xe9. Dans cette nouvelle fen\xeatre, je vais ainsi pouvoir configurer Android Studio. Je vais accepter une installation de type Standard. Je pourrais choisir soit un th\xe8me sombre ou un th\xe8me clair. Je laisse le th\xe8me par d\xe9faut. Et enfin, ici, j'aurai la liste des diff\xe9rents \xe9l\xe9ments qui vont \xeatre t\xe9l\xe9charg\xe9s. Je terminerai en cliquant sur Finish. Ici, je devrais saisir le mot de passe pour accepter l'installation. Une fois les composants t\xe9l\xe9charg\xe9s et install\xe9s, il ne me reste plus qu'\xe0 cliquer sur Finish. Sur la fen\xeatre de bienvenue d'Android Studio, je viendrai cliquer ensuite sur Configure et je s\xe9lectionnerai l'option Plugins. Je saisirai flutter et je cliquerai sur Install. J'accepte les termes d'utilisation. Il me sera \xe9galement demand\xe9 d'installer le plugin Dart, chose que j'accepterai. Et enfin, il ne me restera plus qu'\xe0 relancer Android Studio. Il faut savoir que les deux plugins que nous venons de t\xe9l\xe9charger sont utiles dans le cas o\xf9 vous souhaiteriez d\xe9velopper avec Android Studio. On va revenir sur la console et taper \xe0 nouveau flutter doctor. On voit qu'\xe0 pr\xe9sent, le SDK Android a \xe9t\xe9 d\xe9tect\xe9. Il faut n\xe9anmoins accepter les licences Android. Je vais donc copier la commande suivante et l'ex\xe9cuter. Ici, il me suffira d'accepter en appuyant sur y pour yes. Et \xe0 pr\xe9sent, en relan\xe7ant flutter doctor, on voit que toute la partie en rapport avec Android a \xe9t\xe9 correctement install\xe9e. Juste une pr\xe9cision, ici, il m'est indiqu\xe9 que les plugin Flutter et Dart n'ont pas \xe9t\xe9 install\xe9s, il s'agit d'un bug. Le plus important est que si l'on retourne sur Android Studio, on ait bien cr\xe9\xe9 New Flutter Project, ce qui signifie que les plugins ont bien \xe9t\xe9 install\xe9s. Maintenant, on va s'int\xe9resser \xe0 la partie Xcode. Il va donc falloir au pr\xe9alable installer Xcode. Le plus simple est d'aller le t\xe9l\xe9charger sur l'App Store. Je vais donc lancer l'App Store, je ferai une recherche sur Xcode. Et il me suffira de le t\xe9l\xe9charger. Une fois le t\xe9l\xe9chargement termin\xe9, nous retournerons sur la console. Je vais nettoyer l'\xe9cran avec la commande clear et on retapera \xab flutter doctor \xbb. Le premier message que l'on voit ici est que je dois accepter les licences de Xcode. D'ailleurs, c'est rappel\xe9 ici, \xab open Xcode or run the command \xbb. Je vais lancer la commande qui est conseill\xe9e. Je tape mon mot de passe d'utilisateur. J'appuie sur la touche Espace pour faire d\xe9filer toutes les conditions d'utilisation et je finirai en tapant \xab agree \xbb. Je vais \xe0 nouveau pour relancer la commande flutter doctor. On voit ici qu'il ne me reste plus qu'une seule chose, \xe0 savoir ex\xe9cuter cette commande pour pouvoir installer CocoaPods. Si je lance \xe0 nouveau flutter doctor, il a eu un souci avec CocoaPods. Pour r\xe9soudre ce probl\xe8me, on va essayer de d\xe9finir directement une version. Ce n'est pas un probl\xe8me qui arrive tout le temps. Et si vous avez le m\xeame message d'erreur que moi, vous allez essayer de retaper la m\xeame commande en rajoutant la version de CocoaPods. Ici, j'utiliserai la 1.8.4. \xc0 pr\xe9sent, je vais refaire un flutter doctor, et \xe0 pr\xe9sent, tout fonctionne correctement. Dans cette vid\xe9o, nous avons ainsi vu comment installer les outils pour pouvoir d\xe9velopper sur Android ainsi que les diff\xe9rents outils pour pouvoir d\xe9velopper sur iOS."),(0,a.kt)("h3",{id:"installer-et-configurer-vs-code"},"Installer et configurer VS Code"),(0,a.kt)("p",null,"Nous allons installer Visual Studio Code et le configurer afin de le faire fonctionner avec Flutter. Visual Studio Code est un \xe9diteur de code gratuit et open source qui n'est pas uniquement destin\xe9 \xe0 Flutter, mais qui se veut plut\xf4t g\xe9n\xe9raliste. Il propose de nombreux plugins lui permettant d'\xeatre personnalis\xe9 et qui peuvent par ailleurs lui ajouter des fonctionnalit\xe9s dont il serait d\xe9pourvu. Je vais taper \xab visual studio code \xbb et s\xe9lectionner le site officiel. De l\xe0, je vais cliquer sur Download et en fonction de ma configuration, je choisirai Windows, Linux ou Mac. Une fois le t\xe9l\xe9chargement fait, il restera plus qu'\xe0 proc\xe9der \xe0 une installation classique, pour ensuite lancer Visual Studio Code. Sur l'\xe9cran principal qui s'affiche, je vais pouvoir venir sur la gauche et s\xe9lectionner l'ic\xf4ne Extensions. De l\xe0, je pourrai chercher et installer des extensions, donc des plugins. Je vais par exemple rajouter un plugin qui va me permettre de franciser Visual Studio Code. Je tape \xab French \xbb et s\xe9lectionne le plugin propos\xe9 par Microsoft. Il me reste plus qu'\xe0 l'installer et enfin, cliquer sur Restart now, pour que Visual Studio Code red\xe9marre et prenne en consid\xe9ration les modifications. De l\xe0, je vois que le menu est traduit en fran\xe7ais, ainsi que les sous-menus. Je vais \xe0 pr\xe9sent rajouter l'extension Flutter et installer. Je vais v\xe9rifier que l'extension Dart a bien \xe9t\xe9 install\xe9e, ce qui est le cas, puisque je peux le d\xe9sinstaller et le d\xe9sactiver. Dans la suite de cette formation, nous ferons le choix d'utiliser Visual Studio Code pour d\xe9velopper nos applications Flutter."),(0,a.kt)("h3",{id:"cr\xe9er-un-\xe9mulateur-android"},"Cr\xe9er un \xe9mulateur Android"),(0,a.kt)("p",null,"Nous allons voir comment cr\xe9er un \xe9mulateur Android \xe0 partir de l'IDE Android Studio. Une fois que vous aurez lanc\xe9 Android Studio, vous aurez cette fen\xeatre de bienvenue ; il vous suffira de cliquer sur Configure. Dans le menu d\xe9roulant, vous s\xe9lectionnerez l'option AVD Manager et vous aurez ainsi une fen\xeatre listant des diff\xe9rents \xe9mulateurs Android que vous avez d'install\xe9s sur votre ordinateur. Ici, j'en ai deux. J'aurai \xe9galement tout un ensemble d'informations telles que le nom, la r\xe9solution, la version d'Android qui est install\xe9e sur mon \xe9mulateur ou encore la taille qu'occupe mon \xe9mulateur sur le disque. Enfin, je pourrai lancer mon \xe9mulateur, je pourrai l'\xe9diter pour en changer ne serait-ce que le nom ou la version de l'API et en cliquant sur ce bouton, j'aurai un menu d\xe9roulant qui s'affichera, \xe0 partir duquel je pourrai dupliquer mon \xe9mulateur, donc le copier, je pourrai l'effacer avec le Wipe Data, pour revenir \xe0 sa version initiale ou encore, pourquoi pas, le supprimer. Nous allons cr\xe9er notre propre \xe9mulateur. Pour ce faire, on cliquera sur le bouton Create Virtual Device. Dans cette nouvelle fen\xeatre, j'aurai la possibilit\xe9 de choisir la cat\xe9gorie : soit une t\xe9l\xe9vision, soit un t\xe9l\xe9phone, une montre, une tablette ou encore, utiliser Android Auto. Je vais rester sur le t\xe9l\xe9phone, pour lequel j'aurai une liste de diff\xe9rents t\xe9l\xe9phones que je peux utiliser. Pour la plupart, ce sont des t\xe9l\xe9phones qui ont \xe9t\xe9 produits par Google, donc on a tous les Pixels, on a \xe9galement les pr\xe9c\xe9dentes versions, les versions Nexus, mais on a aussi des versions g\xe9n\xe9riques. J'utiliserai plut\xf4t le Pixel 4 XL, ensuite, j'irai sur Next, j'aurai la possibilit\xe9, dans cette nouvelle fen\xeatre, d'installer une version d'Android. Si je ne l'ai pas, je pourrai \xe9galement au pr\xe9alable la t\xe9l\xe9charger, ensuite, je cliquerai \xe0 nouveau sur le bouton Next et enfin ici, j'aurai la possibilit\xe9 de configurer mon \xe9mulateur en donnant un nom ou par exemple l'orientation, lorsque mon \xe9mulateur sera lanc\xe9. Je pourrai soit s\xe9lectionner le mode Portrait qui est le mode par d\xe9faut, mais je pourrai tout aussi bien mettre le mode Landscape qui est le mode Paysage. Une fois ma configuration termin\xe9e, je cliquerai sur Finish. Et nous avons ainsi notre \xe9mulateur qui est cr\xe9\xe9 ; reste plus qu'\xe0 l'utiliser dans nos d\xe9veloppements en Flutter."),(0,a.kt)("h3",{id:"installer-un-simulateur-ios"},"Installer un simulateur iOS"),(0,a.kt)("p",null,"Nous allons voir comment cr\xe9er un simulateur iOS. Avant d'aller plus loin, je souhaite pr\xe9ciser la diff\xe9rence principale entre un \xe9mulateur et un simulateur. Un \xe9mulateur tel que celui que l'on a sur Android va imiter toute la partie logiciel, mais \xe9galement la partie mat\xe9riel. De l'autre c\xf4t\xe9, un simulateur comme pour iOS va seulement imiter la partie logiciel. Maintenant, on va cliquer sur le bouton permettant de faire une recherche. J'aurais pu utiliser le raccourci Cmd + Espace. Ici, nous allons saisir \xab simulator \xbb. Dans le menu qui appara\xeet en haut de l'\xe9cran, je s\xe9lectionnerai File > New Simulator. Dans cette nouvelle fen\xeatre, je vais pouvoir saisir un nom, admettons, \xab Simulateur iOS Flutter \xbb, je pourrai s\xe9lectionner un appareil ; je vais mettre l'iPhone 12 Pro et enfin, je pourrai d\xe9finir quelle version d'iOS je veux que ce simulateur ait. Ici, je mettrai iOS 14.2. Je terminerai en cliquant sur Create. Pour voir si mon simulateur a bien \xe9t\xe9 cr\xe9\xe9, je vais retourner au niveau du menu, je vais cliquer sur File > Open, je vais s\xe9lectionner la version d'iOS, donc la 14.2 et ici, je trouverai mon simulateur iOS Flutter. Si je clique dessus, j'ai ainsi mon simulateur iOS qui a \xe9t\xe9 cr\xe9\xe9. Nous avons ainsi vu, dans cette vid\xe9o, comment cr\xe9er un simulateur iOS."),(0,a.kt)("h2",{id:"utiliser-flutter"},"Utiliser Flutter"),(0,a.kt)("h3",{id:"cr\xe9er-un-nouveau-projet"},"Cr\xe9er un nouveau projet"),(0,a.kt)("p",null,"Regardons comment cr\xe9er un nouveau projet Flutter de trois fa\xe7ons diff\xe9rentes. Nous commencerons par l'utilisation d'Android Studio, puis comment faire la m\xeame chose avec un Visual Studio Code, et enfin, nous terminerons en cr\xe9ant un nouveau projet uniquement par le biais de lignes de commandes. On va donc lancer Android Studio. Dans la fen\xeatre de bienvenue, nous s\xe9lectionnerons Create New Flutter Project. Sur cette nouvelle fen\xeatre, on laissera Flutter Application s\xe9lectionn\xe9e. Ensuite, il faudra configurer notre nouvelle application. Au niveau du nom du projet, il faut garder \xe0 l'esprit qu'on ne peut pas utiliser ni d'espace ni de majuscule. Ainsi, je ne peux pas faire Myflutter_app. On voit qu'en dessous, j'ai un message d'erreur qui me l'indique. Je dois tout laisser en minuscule et si je souhaite utiliser un espace, puisque je ne peux pas, \xe7a aussi, l'utiliser, je devrais mettre un underscore. Ainsi, si je veux mettre my flutter_app, je devrais remplacer l'espace par un underscore. Le second champ concernera le chemin vers le SDK Flutter. Donc, il faudra mettre le bon chemin. Ensuite, il faudra pr\xe9ciser l'endroit o\xf9 sera enregistr\xe9 votre projet Flutter. Si vous voulez le modifier, il suffira de cliquer sur cette ic\xf4ne-l\xe0, de s\xe9lectionner le bon r\xe9pertoire, et enfin, vous cliquerez sur Open. Vous terminez avec la description de votre application Flutter. On cliquera ensuite sur Next. Ici, il faudra d\xe9finir le nom du package. Ce nom doit \xeatre fait de mani\xe8re \xe0 ce qu'il soit en notation invers\xe9e du nom de domaine. Cela permettra d'identifier votre application de mani\xe8re unique sur le Play Store via le package name ou sur l'App Store gr\xe2ce au Bundle Identifier. On laissera ensuite le support des langages Kotlin et Swift et on cliquera sur Finish. Notre projet se g\xe9n\xe8re et vous pourrez ainsi commencer \xe0 d\xe9velopper sur Flutter. On va \xe0 pr\xe9sent voir la m\xeame chose pour Visual Studio Code. Donc, je vais fermer le projet et je vais lancer Visual Studio Code. Dans cette fen\xeatre, il faudra aller au niveau du menu de tout en haut et cliquer sur Affichage > Palette de commandes. Ici, vous taperez flutter et vous s\xe9lectionnerez Flutter:New Project. Il faudra \xe0 nouveau donner le nom de votre projet. Donc, admettons, je vais mettre my_flutter_app_vscode et j'appuierai sur la touche Entr\xe9e. Ici, je s\xe9lectionnerai le r\xe9pertoire o\xf9 je veux enregistrer mon projet puis je cliquerai sur le bouton bleu Select a folder to create the project in. Notre projet est en train de se g\xe9n\xe9rer. Et vous pouvez \xe0 pr\xe9sent commencer \xe0 d\xe9velopper en Flutter. Une pr\xe9cision n\xe9anmoins, si vous souhaitez modifier ne serait-ce que le nom du package ou le langage \xe0 utiliser, il faudra aller sur Code. Si vous \xeates sous Windows, il faudra s\xe9lectionner Fichier \xe0 la place, puis Pr\xe9f\xe9rences et enfin, Param\xe8tres. Vous saisirez ensuite flutter et vous aurez tout un panel d'options qui vous permettront de personnaliser votre projet. Vous pourrez ainsi descendre et s\xe9lectionner le langage de programmation que vous souhaitez pour Android, Kotlin ou Java ou encore pour iOS, Swift ou Objective-C. Vous pourrez \xe9galement d\xe9finir le package de l'organisation. Donc, vous cliquerez sur Modifier dans settings.json, et ici, vous pourrez laisser, par exemple, \xab com.myorg. \xbb. Terminons \xe0 pr\xe9sent la cr\xe9ation d'un projet en mode console. Je vous invite d\xe9j\xe0 \xe0 aller directement sur le r\xe9pertoire o\xf9 vous voulez cr\xe9er votre projet. Pour moi, ce sera Documents, ensuite, Developpement/projects/ et j'appuierai sur la touche Entr\xe9e. Ici, je taperai flutter create, le nom de mon projet, alors, je mettrai my_flutter_app et je mettrai tout simplement commands et je validerai en appuyant sur la touche Entr\xe9e. Ici, mon projet va \xeatre g\xe9n\xe9r\xe9. Si je souhaite n\xe9anmoins, comme ce qu'on a vu avec Visual Studio Code ou m\xeame Android Studio, le peaufiner en ajoutant d'autres informations, je pourrais, par exemple, faire flutter create -i, pour iOS, et d\xe9finir le langage. Admettons, si je veux de l'Objective-C, je ferais objc. Si je veux ajouter un langage pour Android et dire que je souhaite utiliser du Java, je mettrais -a java. Vous pouvez obtenir toutes les possibilit\xe9s, toutes les options que l'on peut utiliser avec flutter create, en tapant directement flutter create -h ou encore, --help. Et vous aurez ainsi toutes les options qui sont disponibles. Nous avons ainsi vu trois fa\xe7ons diff\xe9rentes de pouvoir g\xe9n\xe9rer un nouveau projet Flutter."),(0,a.kt)("h3",{id:"comprendre-la-structure-dun-projet"},"Comprendre la structure d'un projet"),(0,a.kt)("p",null,"Dans cette vid\xe9o, nous allons voir la structure d'un projet Flutter. Dans la suite de cette formation, je vais utiliser Visual Studio Code. Ainsi, je vais commencer par le lancer. Sur la fen\xeatre de bienvenue, je vais pouvoir ouvrir mon projet. Je vais donc s\xe9lectionner Ouvrir un dossier et s\xe9lectionner un projet que nous avons pr\xe9c\xe9demment cr\xe9\xe9. J'aurais pu faire la m\xeame chose en cliquant sur Fichier > Ouvrir. Je vais maintenant cliquer sur l'ic\xf4ne Explorateur de fichiers o\xf9 j'aurais l'arborescence de mon projet. Avant d'aller plus loin, nous allons am\xe9liorer la visibilit\xe9 de notre projet. Je vous propose donc de cliquer sur l'ic\xf4ne Extensions et de faire une recherche sur icons. Vous allez cliquer ensuite sur Installer au niveau de vscode-icons. Une fois le t\xe9l\xe9chargement termin\xe9, cliquez sur D\xe9finir le th\xe8me des ic\xf4nes de fichier. Ici, si je reviens sur l'explorateur, je constaterai que nous avons des ic\xf4nes qui ont \xe9t\xe9 ajout\xe9es, ce qui permet de plus facilement identifier les diff\xe9rentes parties de notre projet. On va commencer par les deux premiers r\xe9pertoires qui sont des r\xe9pertoires de configuration, l'un pour dart et le second pour idea. idea \xe9tant tout simplement Android Studio. Une partie qui va \xeatre int\xe9ressante va \xeatre le r\xe9pertoire Android et iOS, puisque chacun des r\xe9pertoires va contenir pour l'un un projet Android et pour l'autre, un projet iOS. Ces deux r\xe9pertoires vont nous permettre de pouvoir les personnaliser. Par exemple, pour Android, ajouter des permissions ou pour iOS, de pouvoir compiler notre projet via Xcode. Un r\xe9pertoire qui est tr\xe8s int\xe9ressant sous Flutter va \xeatre le r\xe9pertoire lib puisque celui-ci va contenir toute la structure de notre application Flutter. Nous allons ainsi pouvoir y cr\xe9er des fichiers en dart. Nous allons pouvoir cr\xe9er des sous-r\xe9pertoires pour structurer notre application. Et enfin, il y a un dernier r\xe9pertoire qui est le r\xe9pertoire test. Celui-ci d\xe9passe le cadre de ce projet puisqu'il va nous permettre d'\xe9crire des tests, que ce soient des tests unitaires ou des tests d'int\xe9gration sur notre application. Enfin, je voudrais terminer avec le fichier pubspec.yaml qui va contenir des informations sur notre application. Ainsi, nous aurons le nom de l'application, la description, la version, mais on pourra \xe9galement ajouter des d\xe9pendances \xe0 notre projet en utilisant ce que l'on appelle des packages qui vont venir \xe9tendre les possibilit\xe9s de notre application. Et enfin, on pourra y ajouter des assets tels que des images ou des polices de caract\xe8res. Nous avons ainsi vu quelle est la structure d'un projet Flutter, quelles sont les diff\xe9rentes parties qui la composent et surtout, les parties qui vont nous int\xe9resser pour du d\xe9veloppement d'applications avec Flutter."),(0,a.kt)("h3",{id:"appr\xe9hender-la-notion-de-widget"},"Appr\xe9hender la notion de widget"),(0,a.kt)("p",null,"Nous allons aborder une notion importante en Flutter qui est celle des widgets. Je rappelle que Flutter est un toolkit orient\xe9 UI pour User Interface. Ainsi, les widgets vont \xeatre une notion importante puisqu'ils vont permettre de cr\xe9er une interface utilisateur. Sachant qu'une phrase que vous verrez souvent associ\xe9e \xe0 Flutter est que tout est widget. En effet, un widget peut repr\xe9senter un espace, un alignement, la d\xe9tection d'un clic ou encore une vue. Pour ceux qui ont d\xe9j\xe0 d\xe9velopp\xe9 en natif sur Android ou iOS, il faudra bien veiller \xe0 ne pas penser qu'un widget est uniquement une View pour Android ou une UIView pour iOS. Par ailleurs, les widgets peuvent s'imbriquer et contenir un ou plusieurs autres wigets, ce qui m'am\xe8ne \xe0 la philosophie derri\xe8re les widgets, qui est d'utiliser autant que possible la notion de composition \xe0 la place de l'h\xe9ritage. En d'autres termes, si vous souhaitez, par exemple, cr\xe9er votre propre bouton, vous n'allez pas le cr\xe9er en h\xe9ritant d'une classe bouton mais vous allez plut\xf4t le cr\xe9er \xe0 partir d'autres widgets. Maintenant que nous en savons un peu plus sur les widgets, nous allons voir une notion qui est souvent utilis\xe9e en Flutter et qui s'appelle l'arbre de widgets. ou l'arborescence des widgets, ou encore, dans sa version originale, widget tree. Comme dit pr\xe9c\xe9demment, un widget peut en contenir d'autres. On va ainsi repr\xe9senter cela sous forme d'arborescence, sachant qu'un widget qu'on appellera parent va pouvoir contenir un widget ou une liste de widgets. Le widget enfant, quant \xe0 lui, sera contenu par un autre widget. Si on prend l'\xe9cran suivant qui est tir\xe9 du projet de base d'une application Flutter, on aurait cette arborescence o\xf9 l'on voit qu'un widget peut avoir plusieurs widget. Si pour chaque widget, on affiche son vrai nom, l'arbre devient comme suit. On voit ainsi que le widget qui s'appelle Center n'a qu'un seul enfant. Tandis que en dessous, celui qui s'appelle Column a pour sa part plusieurs enfants. Pour mieux comprendre l'arbre des widgets, on va repr\xe9senter l'arborescence pr\xe9c\xe9dente sous une autre forme o\xf9 les widgets parents contiennent les widgets enfants. Pour all\xe9ger le sch\xe9ma, on va supprimer les widgets qui ne sont pas directement visibles sur l'\xe9cran. Ici, le widget Scaffold va contenir tout notre \xe9cran et chaque partie de l'application, que ce soit la barre de titre en haut, le texte avec le compteur au centre, ou encore le bouton en bas \xe0 droite, se pr\xe9sentera sous forme de widget pouvant contenir ou non d'autres widgets. Pour en revenir au d\xe9but de cette vid\xe9o, je disais que tout est widget, on voit bien que pour obtenir le texte du milieu, on va utiliser un widget qui va centrer ses enfants. Pour avoir deux zones de texte dispos\xe9es verticalement, on utilisera le widget Column. Nous avons ainsi vu une notion essentielle en Flutter, \xe0 savoir les widgets et comment ils peuvent se composer."),(0,a.kt)("h2",{id:"cr\xe9er-une-interface-utilisateur-avec-flutter"},"Cr\xe9er une interface utilisateur avec Flutter"),(0,a.kt)("h3",{id:"employer-les-widgets-materialapp-cupertinoapp-et-text"},"Employer les widgets MaterialApp, CupertinoApp et Text"),(0,a.kt)("p",null,"Nous allons utiliser nos premiers widgets en Flutter. J'ai cr\xe9\xe9 un projet que j'ai appel\xe9 flutter_basics, vous pouvez le nommer diff\xe9remment, bien \xe9videmment, et une fois votre projet g\xe9n\xe9r\xe9, vous veillerez bien \xe0 afficher l'explorateur de fichiers. Vous s\xe9lectionnerez ensuite le r\xe9pertoire lib pour terminer par la s\xe9lection du fichier main.dart. Ici, nous allons s\xe9lectionner tout ce qui est en dehors de la fonction main pour le supprimer, et on veillera bien \xe9videmment \xe0 supprimer MyApp. Je rappelle que la fonction main est le seul point d'entr\xe9e de toute application Dart, et par extension, de toute application Flutter. runApp, quant \xe0 lui, permet de lancer notre application en prenant en param\xe8tre un widget. Le premier widget que nous allons utiliser va permettre de d\xe9finir le design global de notre application. Nous pouvons ainsi utiliser soit le widget MaterialApp ou encore le widget CupertinoApp. Le premier va respecter les principes d\xe9finis par le material design, tandis que CupertinoApp va suivre les recommandations d'Apple quant \xe0 la construction d'une interface utilisateur Ainsi, MaterialApp sera plut\xf4t destin\xe9 \xe0 des applications universelles pouvant tourner sur Android, iOS ou encore sur le web. CupertinoApp, lui, servira des applications qui auront plut\xf4t tendance \xe0 ne fonctionner que sur iOS, bien que cela ne vous emp\xeache pas d'utiliser CupertinoApp sur Android. Je vais ainsi passer en param\xe8tre MaterialApp, qui est un widget, et qui poss\xe8de une propri\xe9t\xe9 qui s'appelle home. home va prendre lui-m\xeame en param\xe8tre un widget et je vais passer le widget Texte qui me permettra d'afficher du texte sur mon \xe9cran. Je mettrai Hello World. Il est recommand\xe9 d'utiliser une virgule \xe0 la fin de chaque widget. Si je fais un clic droit et que je clique sur Mettre le document en forme, mon code se mettra sur une seule ligne, tandis que si je suis les recommandations en mettant une virgule, je mets une premi\xe8re et une seconde virgule, je fais \xe0 nouveau un clic droit et je clique sur Mettre le document en forme, mon code est alors format\xe9 et devient beaucoup plus lisible. Je vais \xe0 pr\xe9sent sauvegarder notre code en faisant Cmd + S sur Mac ou Ctrl + S sous Windows. Pour ex\xe9cuter mon application, je pourrais soit cliquer sur ce bouton qui est en haut \xe0 droite, soit aller sur le menu et cliquer sur Ex\xe9cuter, puis Ex\xe9cuter sans d\xe9bogage. Ou enfin, je peux directement cliquer sur run. Ici, mon \xe9mulateur va se lancer. Je vais l'afficher. Et nous avons le r\xe9sultat produit par notre application. Nous avons bien \xab Hello World \xbb. Si je souhaite customiser le texte, celui-ci prend \xe9galement des param\xe8tres. Il a quelques propri\xe9t\xe9s. Ainsi, je peux rajouter gr\xe2ce \xe0 la propri\xe9t\xe9 style un TextStyle qui va me permettre de modifier, par exemple, la couleur du texte, l'arri\xe8re plan... Je pourrais aussi agrandir la police. Je vais, par exemple, mettre un backgroundColor qui permettra de modifier la couleur d'arri\xe8re-plan. Pour d\xe9finir une couleur, je mettrai Colors avec un s, suivi du nom de ma couleur. Je mettrai blue. Et je changerai la taille de la police avec fontSize en passant, admettons 40. Je relance mon code et on voit que la modification a bien eu lieu. Si je souhaite ajouter une nuance, je peux s\xe9lectionner blue, et je vois une liste des diff\xe9rentes possibilit\xe9s. Je vais rajouter un crochet et mettre 50. Je relance. Et on voit bien que l'arri\xe8re-plan a \xe9t\xe9 modifi\xe9 en cons\xe9quence. Dans cette vid\xe9o, nous avons vu comment cr\xe9er une application respectant les principes du material design, comment utiliser un widget Text, et comment le modifier."),(0,a.kt)("h3",{id:"aborder-scaffold"},"Aborder Scaffold"),(0,a.kt)("p",null,"Nous allons d\xe9couvrir un widget qui est assez r\xe9current ; le widget Scaffold. Dans cet exemple, il faut admettre que notre application n'est pas des plus attrayantes. Gr\xe2ce \xe0 Scaffold, nous allons pouvoir am\xe9liorer notre interface puisqu'il propose parmi de nombreuses autres choses la possibilit\xe9 d'ajouter une AppBar qui se logera en haut de l'\xe9cran et qui permettra, par exemple, d'afficher un titre. Scaffold nous permettra aussi d'avoir un menu coulissant sur le c\xf4t\xe9 que l'on appelle un drawer, ou encore, pourquoi pas, un floatingActionButton qui est un bouton flottant que l'on trouve la plupart du temps en bas \xe0 droite. On va modifier notre application pour y int\xe9grer un Scaffold. Je vais donc copier le texte qui est affichait \xab Hello World \xbb et le remplacer par le widget Scaffold. On va utiliser la propri\xe9t\xe9 AppBar qui prend un widget AppBar, lui-m\xeame prenant une propri\xe9t\xe9 title. On serait tent\xe9 ici pour l'AppBar de mettre directement une cha\xeene de caract\xe8res admettons, \xab MyApp \xbb, et si je passe mon curseur sur la propri\xe9t\xe9 title, je vois que celui-ci n'accepte qu'un widget. Je vais donc mettre un widget Text pour pouvoir afficher ma cha\xeene de caract\xe8res. Si je sauvegarde et que je lance mon code, l'application est bien plus jolie \xe0 pr\xe9sent. La AppBar qui est ici appara\xeet bien avec le titre et elle occupe toute la largeur de l'\xe9cran. Un th\xe8me utilisant la couleur bleue a \xe9t\xe9 utilis\xe9 par d\xe9faut. Nous allons maintenant utiliser tout l'espace restant qui est ici en blanc en utilisant la propri\xe9t\xe9 body. Je vais coller le texte que j'avais supprim\xe9 pr\xe9c\xe9demment et je vais reformater mon code. Je sauvegarde puis je relance l'application. Mon texte s'affichant, je vais \xe0 pr\xe9sent ajouter un floatingActionButton. Pour savoir o\xf9 le placer, je vais m'aider du commentaire qui a \xe9t\xe9 auto-g\xe9n\xe9r\xe9, je vois que cette parenth\xe8se fait r\xe9f\xe9rence au widget Scaffold. Je vais venir juste au-dessus et taper ensuite floatingActionButton qui prendra un widget FloatingActionButton. Ici, j'ai une mise en garde, un warning. Je vais cliquer sur l'ampoule qui va m'indiquer qu'il faut un argument requis un argument qui est obligatoire. Je vais donc cliquer dessus pour que cela s'ajoute automatiquement. Cet argument est celui qui permet de g\xe9rer le clic. C'est pourquoi je vais laisser le corps de la fonction anonyme vide et je vais plut\xf4t ajouter une propri\xe9t\xe9 s'appelle child. Cette propri\xe9t\xe9 m'indique donc qu'un floatingActionButton accepte un seul widget enfant. Je vais donc mettre un texte, et j'ai cr\xe9\xe9 \xab OK \xbb. Je terminerai par sauvegarder et par relancer mon application. J'ai ainsi mon floatingActionButton qui appara\xeet avec le texte. Si je clique dessus, il n'y a aucune action puisque j'ai laiss\xe9 le corps de ma fonction vide, et quand je clique sur le bouton, j'ai une petite animation. C'est ce qu'on appelle l'animation ripple puisque j'ai d\xe9fini dans mon application que l'on allait utiliser un material app, et donc, suivre les principes du material design. Dans cette vid\xe9o, nous avons ainsi vu ce qu'est un Scaffold et comment l'utiliser dans notre application."),(0,a.kt)("h3",{id:"tirer-parti-des-stateless-widgets-et-du-hot-reload"},"Tirer parti des stateless widgets et du hot reload"),(0,a.kt)("p",null,"Nous allons voir comment cr\xe9er un statelessWidget et comment tirer profit du hot reload. Je vais commencer par centrer le texte Hello World qui, actuellement, est en haut \xe0 gauche de l'\xe9cran. Pour ce faire, je vais utiliser le widget Center. Je vais venir devant le widget Text et taper Center. J'ouvre la parenth\xe8se. Il faudra bien \xe9videmment que je pense \xe0 la fermer. Et je vais utiliser la propri\xe9t\xe9 child en disant que le widget enfant du widget Center est ce widget Text. Une autre fa\xe7on de faire qui est beaucoup plus simple, serait \xe0 nouveau de venir s\xe9lectionner le widget Text, de cliquer sur l'ampoule qui est sur la gauche et de s\xe9lectionner Wrap with Center, envelopper avec le widget Center. Je sauvegarde. Pour que mes modifications soient prises en compte, je vais cliquer sur le bouton Red\xe9marrer. On appelle cela un hot restart. Il est important de retenir qu'il existe globalement deux types de widgets en Flutter. Nous avons les stateless widgets pour widget sans \xe9tat, et les statefull widgets qui est le contraire donc, widget avec \xe9tat. Les stateless widget vont \xeatre des widgets dont l'\xe9tat ne changera pas une fois le widget construit. Par exemple, un widget Text comme celui affichant actuellement Hello World ne pourra pas se rafra\xeechir avec une nouvelle cha\xeene de caract\xe8res une fois qu'il a \xe9t\xe9 construit. \xc0 l'inverse, un statefull widget pourra avoir son \xe9tat chang\xe9 durant toute sa dur\xe9e de vie. Un CheckBox en sera un car il peut prendre deux \xe9tats, coch\xe9 ou non coch\xe9. Pour faire simple, si un utilisateur peut interagir avec le widget, il y a de fortes chances qu'il soit statefull. Sinon, il sera stateless. Les statefull widgets sont vus dans une autre vid\xe9o de cette formation. On va maintenant cr\xe9er notre premier stateless widget. Gr\xe2ce \xe0 \xe7a, plut\xf4t que de devoir tout mettre dans la fonction main comme c'est actuellement le cas, nous allons pouvoir subdiviser notre code et permettre son \xe9ventuelle r\xe9utilisation. Mais on pourra aussi tirer b\xe9n\xe9fice du hot reload qui nous permettra de r\xe9percuter tout changement \xe0 notre code sans avoir besoin de red\xe9marrer l'application. Je vais donc \xe9crire sur le Visual Studio Code st, qui m'ouvrira un menu contextuel. Je s\xe9lectionnerai ainsi Flutter stateless widget. Je devrais fournir un nom \xe0 ma classe. Je mettrai HomePage. Et on voit que finalement, un stateless widget va venir red\xe9finir une m\xe9thode qui s'appelle build, et qui retourne un widget. Cette m\xe9thode build sera appel\xe9e \xe0 chaque fois qu'il y aura une modification au niveau de notre widget. Je vais \xe0 pr\xe9sent s\xe9lectionner notre scaffold avec toute son arborescence. Je vais couper. Je vais supprimer le widget container que nous verrons dans une autre vid\xe9o de cette formation et je vais enfin coller mon scaffold. Je vais supprimer la virgule puisque je n'ai pas d'autres widgets \xe0 ajouter, et vu que nous utilisons le mot cl\xe9 return, nous devons terminer par un point virgule. \xc0 pr\xe9sent, je vais utiliser le nom du widget que je viens de cr\xe9er HomePage, je vais sauvegarder mes changements, et je vais devoir red\xe9marrer une premi\xe8re fois l'application puisque j'ai fait des modifications \xe0 ma fonction main. Et maintenant, si je fais un changement, par exemple sur, Hello World, et que je rajoute un point d'exclamation, Je vais m\xeame rajouter deux autres K \xe0 OK. Je sauvegarde en faisant Cmd + S sur Mac ou Ctrl + S sur Windows. On voit que imm\xe9diatement, mes changements se sont r\xe9percut\xe9s sur mon \xe9mulateur. Je reviens. Je re-modifie mon floatingActionButton et je re-sauvegarde \xe0 nouveau, tout se fait de mani\xe8re imm\xe9diate. C'est ce que l'on appelle le hot reload. Dans cette vid\xe9o, nous avons vu comment cr\xe9er un stateless widget, la diff\xe9rence avec un statefull widget, et enfin, nous avons vu de mani\xe8re pratique comment utiliser le hot reload."),(0,a.kt)("h3",{id:"composer-des-layouts--container-et-stack"},"Composer des layouts : Container et Stack"),(0,a.kt)("p",null,"Nous allons d\xe9couvrir deux widgets nous permettant de r\xe9aliser nos \xab layouts \xbb : les widgets Container et Stack. Commen\xe7ons avec le Container qui comme son nom le laisse penser, va servir de conteneur. Il ne contiendra qu'un seul widget, il aura donc un seul enfant, mais il aura diff\xe9rentes propri\xe9t\xe9s lui permettant par exemple, de d\xe9finir une taille ou encore, une couleur d'arri\xe8re-plan. Je vais modifier notre widget Text en supprimant Hello World et en tapant Flutter. Je vais \xe9galement enlever la ligne permettant de d\xe9finir la couleur d'arri\xe8re-plan du texte. Et enfin, je vais terminer en ajoutant un Container widget Text. \xc0 pr\xe9sent, je sauvegarde et on voit qu'au-del\xe0 du fait d'avoir chang\xe9 le texte et d'avoir chang\xe9 la couleur d'arri\xe8re-plan, rien n'est apparent. Pour voir la diff\xe9rence, je vais ajouter une nouvelle propri\xe9t\xe9 qui s'appelle \xab Color \xbb qui permet \xe0 un Container d'avoir une couleur d'arri\xe8re-plan. Je vais utiliser Colors.lime pour du vert citron et je sauvegarde. On voit que le Container va occuper la taille de son widget enfant. Si je veux que le Container occupe plut\xf4t la taille du widget parent, et donc en l'occurrence ici, \xe7a serait tout l'espace qui est en blanc, je ferais appel \xe0 la propri\xe9t\xe9 \xab width \xbb, donc la largeur et je lui passerais comme valeur double.infinity. Je ferai la m\xeame chose avec la hauteur : \xab height \xbb double.infinity, enfin je sauvegarde et on voit que tout l'espace a \xe9t\xe9 occup\xe9 par le Container. Enfin, si je souhaite attribuer \xe0 mon Container une taille fixe, je pourrai lui mettre par exemple, 300 pour la largeur et 400 pour la hauteur. On voit d'ailleurs que le widget enfant, ici en l'occurrence, c'est le Text, va venir se loger en haut \xe0 gauche. Si je souhaite faire en sorte qu'il soit log\xe9 au centre, j'utiliserai la propri\xe9t\xe9 Alignement suivi de Alignement avec un A majuscule point center. Je pourrais faire la m\xeame chose si je voulais qu'il soit centr\xe9, mais plut\xf4t \xe0 droite, donc je mettrai center.Right ; ou encore, si je souhaitais qu'il soit en bas \xe0 gauche, je mettrai bottomLeft. \xc0 pr\xe9sent, regardons de plus pr\xe8s le widget Stack. Celui-ci va contenir plusieurs widgets puisqu'il va venir les empiler les uns sur les autres. Je vais supprimer notre Container et le remplacer par Stack. Une Stack va prendre comme propri\xe9t\xe9 non plus child, mais plut\xf4t children vu qu'il a plusieurs enfants. Et children sera initialis\xe9 avec une liste ","[inaudible]"," que l'on voit \xe0 travers l'utilisation des double crochets. \xc0 l'int\xe9rieur, je vais cr\xe9er trois Containers qui auront une forme carr\xe9e, donc pour la largeur, je mettrai 250 pour le premier, la hauteur sera bien \xe9videmment la m\xeame et je mettrai une couleur d'arri\xe8re-plan : Color Colors de couleur noire. Je vais dupliquer cette ligne et la coller deux fois. Je vais modifier les tailles, le second sera l\xe9g\xe8rement plus petit que le premier, il aura une couleur verte et enfin, le dernier sera le plus petit, et il aura une couleur jaune. Si je relance l'application ou du moins, si je fais du \xab hot reload \xbb, je vois que mes diff\xe9rents Containers sont venus s'empiler les uns sur les autres. L\xe0 aussi, si je souhaite modifier l'alignement, je pourrai utiliser la propri\xe9t\xe9 Alignement et faire comme ce qu'on avait fait avec le Container. Ainsi, mes diff\xe9rents Containers sont \xe0 pr\xe9sent empil\xe9s, mais centr\xe9s. Nous avons ainsi vu comment utiliser le widget Container et comment utiliser le widget Stack."),(0,a.kt)("h3",{id:"composer-des-layouts--row-et-column"},"Composer des layouts : Row et Column"),(0,a.kt)("p",null,"Cette vid\xe9o va vous montrer comment on peut disposer des widgets de mani\xe8re horizontale ou verticale. Nous allons commencer avec le widget Row. Celui-ci permet de mettre les widgets qu'il contient les uns \xe0 la suite des autres de mani\xe8re horizontale. Je vais modifier le widget Container par le widget Row et je vais lui ajouter des \xe9l\xe9ments \xe0 travers l'utilisation de la propri\xe9t\xe9 children. Les \xe9l\xe9ments que je vais lui ins\xe9rer vont \xeatre le logo FlutterLogo qui permet d'afficher le logo Flutter. Je vais d\xe9finir la taille. Et plut\xf4t que de devoir copier x fois le FlutterLogo, je vais utiliser la boucle for. Donc, for i, alors je vais l'afficher cinq fois. Une boucle for, quand on l'utilise dans une liste, ne peut pas contenir d'accolades. Je vais donc les supprimer et afficher cinq fois mon logo Flutter. Je lance mon application et on voit bien ici que j'ai les cinq \xe9l\xe9ments qui sont dispos\xe9s de gauche \xe0 droite et de mani\xe8re horizontale. Si je voulais d'ailleurs les mettre de droite \xe0 gauche, je pourrais utiliser la propri\xe9t\xe9 textDirection et utiliser ensuite TextDirection.rtl. rtl pour right to left donc, de droite \xe0 gauche. Je vais \xe0 pr\xe9sent ajouter un Container \xe0 notre Row et je vais lui ajouter une couleur, donc color. Je vais mettre Colors.blue avec une nuance \xe0 50. Je relance. Le Container me permet de voir que le Row par d\xe9faut va utiliser tout l'espace disponible. Si je souhaite que le Row utilise le moins d'espace possible, je vais utiliser la propri\xe9t\xe9 mainAxisSize, suivie de MainAxisSize.min. D'ailleurs, j'en profite pour aborder la notion de mainAxis. Dans un Row donc, dans une ligne, l'axe principal sera l'axe horizontal. De la m\xeame mani\xe8re pour une colonne qui affiche de mani\xe8re verticale les \xe9l\xe9ments, son axe principal sera l'axe vertical. Ainsi, je vais pouvoir utiliser une propri\xe9t\xe9 qui s'appelle mainAxisAlignement. Je pourrais ainsi faire en sorte que les \xe9l\xe9ments soient centr\xe9s, qu'ils soient \xe9ventuellement s\xe9par\xe9s par des espaces. Je peux m\xeame demander \xe0 ce que l'espace soit r\xe9parti de mani\xe8re \xe9quitable. Si je change mon widget Row et que je le remplace par le widget Column, on voit que j'ai la m\xeame chose sauf qu'\xe0 pr\xe9sent, les \xe9l\xe9ments sont dispos\xe9s de mani\xe8re verticale. Je vais enlever le mainAxisAlignement et les \xe9l\xe9ments sont ainsi beaucoup plus regroup\xe9s. Aussi, si je souhaitais que les diff\xe9rents \xe9l\xe9ments qui sont contenus soient affich\xe9s non pas de haut en bas, mais plut\xf4t de bas en haut, j'utiliserai le verticalDirection suivi de VerticalDirection.up. Enfin, nous avons vu le mainAxis, mais il y a \xe9galement le crossAxis. Le crossAxis est l'axe perpendiculaire. Ainsi, pour une colonne dont l'axe principal est l'axe vertical, le crossAxis sera l'axe horizontal. Donc, si j'utilise le crossAxisAlignement et que je mets la propri\xe9t\xe9 CrossAxisAlignement.end, pour pouvoir l'afficher puisque le probl\xe8me \xe9tant que l\xe0, le crossAxis utilise le moins d'espace possible. Pour agrandir cela, je vais aller sur mon Container et dire qu'il doit occuper tout l'espace disponible. Je vais lui mettre une largeur \xe0 l'infini et je ferai pareil pour la hauteur. Il occupera ainsi tout l'\xe9cran. Et l\xe0, on voit finalement que pour une colonne dans le mainAxis est vertical, le crossAxis me permettra de d\xe9caler les \xe9l\xe9ments sur la droite. Si je souhaite les centrer, je pourrais utiliser center. Si je modifie la colonne par un widget Row, j'obtiendrais la m\xeame chose, mais de mani\xe8re inverse, puisque le crossAxis de widget Row sera l'axe vertical. Nous avons ainsi vu comment utiliser les widgets Row et Column."),(0,a.kt)("h3",{id:"composer-des-layouts--expanded-et-la-propri\xe9t\xe9-flex"},"Composer des layouts : Expanded et la propri\xe9t\xe9 Flex"),(0,a.kt)("p",null,"Nous allons voir comment g\xe9rer l'espace disponible dans un widget Row ou un widget Colors. J'ai pr\xe9alablement \xe9crit du code que l'on va passer en revue. J'ai ainsi utilis\xe9 un widget Row qui va contenir trois widgets enfants de type Container. Chaque Container aura sa largeur \xe9gale \xe0 sa hauteur de sorte \xe0 avoir une forme carr\xe9e. Le premier conteneur aura une couleur jaune, d'ailleurs, on peut le voir ici. Le second, une couleur verte, Le dernier, une couleur indigo. Enfin, j'ai inclus mon widget Row dans un widget Container, \xe0 nouveau, qui, lui, aura une couleur plus ou moins bleu pastel, j'ai utilis\xe9 une nuance \xe0 50, et cette couleur bleue nous indiquera quelle est l'espace qui n'a pas \xe9t\xe9 utilis\xe9 par les trois containers. Pour mieux comprendre cela, je vais lancer le code. On voit ici nos trois containers, et en bleu, on voit tout l'espace qui n'a pas \xe9t\xe9 utilis\xe9. Dans le cas o\xf9 je voudrais que le container vert utilise tout cet espace restant, je le s\xe9lectionnerais, et je le mettrais dans un widget qui s'appelle Expanded et qui a une propri\xe9t\xe9 child. On voit maintenant que le container vert s'est \xe9tir\xe9 et a occup\xe9 tout l'espace disponible restant. Si maintenant je fais la m\xeame chose avec les deux autres containers, je leur met donc un Expanded, je pense bien s\xfbr \xe0 fermer les parenth\xe8ses, on voit que l'espace qui est attribu\xe9 \xe0 notre widget Row est finalement partag\xe9 de mani\xe8re \xe9quitable entre les trois containers. Pour mieux comprendre cela, il faut savoir que Expanded va avoir une propri\xe9t\xe9 qui s'appelle flex. Cette propri\xe9t\xe9, par d\xe9faut, va \xeatre mise \xe0 1. Si je rajoute la propri\xe9t\xe9 flex aux trois Expanded, on voit que rien ne change par rapport \xe0 ce que l'on avait. Maintenant, si je mettrais, on va dire, une valeur de 10 au Container vert, on voit que celui-ci a occup\xe9 beaucoup plus d'espace que les autres. Il faut savoir que l'espace total utilis\xe9 par le widget Row va \xeatre \xe9gal \xe0 la somme des flex qu'il contient. En d'autres termes, ici, l'espace total disponible est \xe9gal \xe0 10 plus 1, plus 1, soit 12. Donc ici, notre second container va prendre 10 douzi\xe8mes de l'espace, tandis que les deux autres prendront seulement un douzi\xe8me de l'espace. Je peux modifier les valeurs flex, et l\xe0, en faisant l'addition, on aura donc une valeur totale de 6 : 3 plus 2, plus 1. Le premier occupera un sixi\xe8me de l'espace, le second, deux sixi\xe8mes, soit un tiers de l'espace, et le dernier, trois sixi\xe8mes, soit un demi, donc la moiti\xe9 de l'espace. On le voit ici, la couleur indigo utilise la moiti\xe9. Ici, on va dire \xe0 peu pr\xe8s 0,33 %, et le dernier, un sixi\xe8me de l'espace. Une autre fa\xe7on int\xe9ressante d'utiliser les Expanded est avec les textes. Alors, je vais copier le premier container. Je vais supprimer tout le reste et je vais ajouter un texte. Je vais mettre, admettons, \xab Hello \xe7a va? \xbb, et je vais relancer. Tout va bien. Par contre, si mon texte venait \xe0 s'agrandir de sorte \xe0 ce que j'ai une longue cha\xeene de caract\xe8res, je vais relancer. On voit que l\xe0, sur l'\xe9cran, j'ai une zone avec des lignes hachur\xe9es de couleur jaune et noir. Cela s'appelle un overflow. Mon texte a finalement d\xe9bord\xe9 de l'\xe9cran. Pour rem\xe9dier \xe0 cela, je vais venir le mettre dans un Expanded avec la propri\xe9t\xe9, toujours, child qui est obligatoire. Et si je relance, on voit que le texte, finalement, a adapt\xe9 son contenu de sorte que le texte est revenu \xe0 la ligne. Nous avons ainsi vu l'utilisation du widget Expanded, mais \xe9galement l'utilisation de sa propri\xe9t\xe9 flex."),(0,a.kt)("h3",{id:"r\xe9cup\xe9rer-les-images-et-les-ic\xf4nes"},"R\xe9cup\xe9rer les images et les ic\xf4nes"),(0,a.kt)("p",null,"La plupart des applications utilisent des images et des ic\xf4nes. Nous allons voir comment les utiliser en Flutter. J'ai ici une application basique o\xf9 j'ai un Container qui est de couleur bleu pastel et qui est centr\xe9 au niveau de l'\xe9cran. Sa largeur est plus petite que sa hauteur et enfin, en bas \xe0 droite, j'ai un FloatingActionButton qui affiche la cha\xeene de caract\xe8res OK. On va modifier ce FloatingActionButton pour obtenir non pas du texte, mais une ic\xf4ne. Je vais supprimer le widget Text et le remplacer par le widget Icon. Ici, on voit que ce widget prend en param\xe8tre ce qu'on appelle un widget \xab IconData \xbb. Pour en obtenir un, je vais donc mettre Icons avec un S suivi d'un point et ici, j'obtiendrai une liste de diff\xe9rentes ic\xf4nes que je peux utiliser dans mon application. Pour ma part, j'utiliserai l'ic\xf4ne Add, je sauvegarde et on voit que mon texte OK a \xe9t\xe9 remplac\xe9 par une ic\xf4ne en forme de plus. Je peux en outre customiser mon ic\xf4ne, je vais lui mettre une taille de 50 et je vais d\xe9finir sa couleur comme \xe9tant jaune. Si je relance, la couleur a bien \xe9t\xe9 modifi\xe9e et la taille est diff\xe9rente. Int\xe9ressons-nous maintenant aux images. On va r\xe9cup\xe9rer une image depuis internet. Je vais commencer par dire que mon Container prend un enfant, celui-ci sera un widget de type Image et j'utiliserai le constructeur nomm\xe9 Network. Ce constructeur va prendre en param\xe8tre une URL, l'URL de l'image. Pour ma part, j'utiliserai le site Lorem Picsum qui va nous retourner une image de mani\xe8re al\xe9atoire. En param\xe8tre, je dirai que je veux une image dont la largeur est de 640 pixels. Si je lance, j'ai donc bien une image et celle-ci est r\xe9cup\xe9r\xe9e depuis internet. Je peux utiliser une propri\xe9t\xe9 qui s'appelle \xab fit \xbb qui va me permettre de d\xe9finir les proportions de mon image. Ainsi, je pourrai mettre BoxFit.fit ou pourquoi pas, BoxFit.fitHeight pour adapter \xe0 ma hauteur. Regardons maintenant comment on peut utiliser des images, non plus depuis le r\xe9seau, mais directement depuis notre application. Je vais aller sur l'explorateur de fichier et \xe0 la racine, je vais cr\xe9er un nouveau r\xe9pertoire. Je peux l'appeler comme bon me semble. Pour ma part, je l'appellerai \xab assets \xbb, donc un fichier de ressources \xe0 l'int\xe9rieur duquel je vais cr\xe9er un sous-r\xe9pertoire que j'appellerai \xab images \xbb. Ici, j'ai pr\xe9par\xe9 deux images que je vais glisser-d\xe9poser. Il ne me restera maintenant plus qu'\xe0 informer mon application que ces deux images sont disponibles. Je vais donc aller sur mon fichier de configuration pubspec.yaml, c'est un fichier o\xf9 l'indentation est importante. Donc, je devrais mettre assets en dessous de Flutter ; il faut pas qu'il soit au m\xeame niveau, il faut qu'il y ait absolument cette indentation. Je vais mettre assets: \xe0 l'int\xe9rieur duquel je vais d\xe9finir le chemin jusqu'\xe0 mes images. \xc7a sera donc assets/image/img1 .jpg. Je fais la m\xeame chose pour la seconde image. C'est vrai que l\xe0, j'ai que deux images, donc je peux les taper manuellement. Mais dans le cas o\xf9 vous en auriez une trentaine, voire m\xeame une quarantaine, vous pouvez d\xe9finir le r\xe9pertoire qui les contient. Je peux donc faire assets/images/ et terminer. Alors, il faut bien veiller \xe0 avoir le dernier slash. Si je sauvegarde et que maintenant, je reviens sur mon fichier main.darts, je vais pouvoir mettre cet Image.network en commentaire et mettre maintenant Image.assets. En param\xe8tre, je mettrai le chemin de mon image. Donc, je pourrais mettre assets images/ et pourquoi pas, img2 pour les JPG. Si je relance, j'ai bien ma seconde image, on va quand m\xeame v\xe9rifier. Il s'agit bien de la bonne image. Nous avons ainsi vu comment utiliser des ic\xf4nes dans une application, mais \xe9galement, comment r\xe9cup\xe9rer des images depuis internet, comment les adapter et comment \xe9galement utiliser des images depuis notre application."),(0,a.kt)("h3",{id:"afficher-une-liste-de-widgets-gr\xe2ce-\xe0-une-listview"},"Afficher une liste de widgets gr\xe2ce \xe0 une ListView"),(0,a.kt)("p",null,"Pour pouvoir afficher une liste de widgets et pouvoir la faire d\xe9filer verticalement ou horizontalement, Futter nous offre la possibilit\xe9 d'utiliser le widget ListView. C'est ce que nous allons d\xe9couvrir dans cette vid\xe9o. Pour illustrer la ListView, nous allons afficher dans notre application, la liste des 27 pays membres de l'Union Europ\xe9enne. Je vais cr\xe9er une constante dans ma classe HomePage que j\u2019appellerai \xab euroList \xbb et qui sera une liste de strings. Cette liste sera le nom des 27 pays. Pour les afficher, je remplacerai mon Container par le widget ListView. Ce widget va utiliser la propri\xe9t\xe9 children qui sera une liste de widgets. Ces widgets n'ont pas \xe0 \xeatre du m\xeame type, je peux en effet avoir un texte vide suivi d'un Flutter logo, je peux encore avoir un Container ; je pense que vous avez compris le concept. Dans notre cas, nous allons afficher les noms des 27 pays. Je vais donc utiliser une boucle for, je vais appeler ma variable \xab country \xbb et ma liste s'appelle \xab euroList \xbb. Faudra bien veiller \xe0 supprimer les accolades puisqu'on ne peut les utiliser dans le cas pr\xe9sent. Et j'afficherai dans un WidgetText le nom du pays. Si je lance notre application, on a bien la liste des 27 pays que malheureusement, je ne peux faire d\xe9filer puisqu'il rentre enti\xe8rement dans notre \xe9cran. Nous allons remplacer notre texte par le widget ListTile qui offre l'avantage de facilement agr\xe9menter les \xe9l\xe9ments de la ListView. ListTile. Et en param\xe8tre, on va trouver une propri\xe9t\xe9 Title pour le titre. Je mettrai le nom du pays. Bien \xe9videmment Title prend en param\xe8tre un widget. J'aurai subtitle, je remettrai le m\xeame widget ; et enfin, vous pourrez avoir sur la partie gauche, un widget, ou sur la partir droite, \xe0 nouveau un widget. Ici, la partie gauche sera le leading. Je mettrai le widget CircleAvatar qui est un widget affichant une forme circulaire. \xc0 l'int\xe9rieur duquel je mettrai une couleur donc, j'utiliserai la propri\xe9t\xe9 backgroundColor qui sera, vu qu'on est avec l'Union Europ\xe9enne, de couleur bleue. Si je lance notre code, on a bien notre CircleAvatar qui gr\xe2ce au leading est affich\xe9 \xe0 gauche, le titre ici et le sous-titre. Bien que tr\xe8s fonctionnelle, notre ListView actuelle pr\xe9sente l'inconv\xe9nient de pr\xe9charger tous les \xe9l\xe9ments de la liste. M\xeame ceux qui ne sont pas visibles \xe0 l'\xe9cran. Avec notre liste de 27 \xe9l\xe9ments, ce n'est pas vraiment un probl\xe8me. Mais si l'on avait plut\xf4t 500, voire 1 000 \xe9l\xe9ments avec un affichage un peu plus complexe, ce serait pas la solution la plus optimale. Pour rem\xe9dier \xe0 cela, on va utiliser la ListView.builder. Imm\xe9diatement, j'ai un \xab warning \xbb qui me dit que ListView.builder prend un argument requis qui est itemBuilder. itemBuilder va prendre une fonction qui aura deux param\xe8tres : le contexte, je peux m\xeame supprimer le type, et un index qui est peut-\xeatre l'argument qui est le param\xe8tre le plus important qui va nous permettre de pouvoir acc\xe9der aux \xe9l\xe9ments de notre liste. On n'a plus besoin de la propri\xe9t\xe9 children, je vais donc juste r\xe9cup\xe9rer le ListTile et je vais supprimer la propri\xe9t\xe9 children. Ici, on va dans le corps de notre fonction anonyme et on va dire quoi retourner \xe0 chaque \xe9l\xe9ment qui est donn\xe9 en param\xe8tre gr\xe2ce \xe0 l'index. Ici, on va faire return, on va utiliser ListTile et on va utiliser l'index avec notre liste. J'aurai euroList crochet pour obtenir le nom du pays \xe0 la position index, je supprimerai le sous-titre et je veillerai \xe0 mettre un point virgule puisqu'on a une instruction gr\xe2ce \xe0 l'utilisation du mot-cl\xe9 return. Si je relance, on a donc bien notre liste qui s'affiche correctement, mais si je \xab scroll \xbb tout en bas, appara\xeet un message d'erreur. Ce message d'erreur nous indique que nous essayons d'afficher plus d'\xe9l\xe9ments que nous n'avons dans notre liste. Pour corriger ce probl\xe8me, je vais aller \xe0 mon ListViewbuilder et utiliser la propri\xe9t\xe9 item.Count. Ici, je dirai que nous avons euroList.length \xe9l\xe9ment que nous avons 27 \xe9l\xe9ments, ou du moins, nous avons le nombre d'\xe9l\xe9ments que contient euroList. En relan\xe7ant, le probl\xe8me est \xe0 pr\xe9sent corrig\xe9. Nous avons ainsi vu comment utiliser une ListView, comment utiliser une ListViewbuilder qui, elle, va charger seulement les \xe9l\xe9ments qui sont affich\xe9s \xe0 l'\xe9cran et enfin, nous avons vu comment utiliser des ListTile."),(0,a.kt)("h3",{id:"aborder-les-stateful-widgets"},"Aborder les stateful widgets"),(0,a.kt)("p",null,"Dans cette vid\xe9o, nous allons aborder la notion de StatefulWidget. Widget est simplement une classe. Pour cr\xe9er notre propre widget et pouvoir ensuite le composer \xe9ventuellement avec d'autres widgets, on a la possibilit\xe9 d'h\xe9riter de la classe StatelessWidget, comme ce qui appara\xeet actuellement dans le code. La notion de StatelessWidget est pr\xe9sent\xe9e dans une autre vid\xe9o de cette formation. Nous pouvons aussi utiliser un StatefulWidget. Celui-ci va avoir un \xe9tat et en fonction de son \xe9tat, il pourra se rafra\xeechir. Ce n'est pas une r\xe8gle absolue, mais de mani\xe8re g\xe9n\xe9rale, si l'utilisateur peut interagir avec un widget, ce sera un StatefulWidget. Nous allons ainsi cr\xe9er un nouveau widget qui permettra d'indiquer un message activ\xe9 ou non activ\xe9 en fonction de l'\xe9tat d'un CheckBox. Pour ce faire, je vais utiliser le raccourci stf qui permettra de cr\xe9er un StatefulWidget, que je vais appeler _CustomCheckBox. Je vais d\xe8s maintenant, l'instancier dans ma HomePage. Et on voit ici que deux classes ont \xe9t\xe9 g\xe9n\xe9r\xe9es. La premi\xe8re va h\xe9riter de la classe StatefulWidget. D'ailleurs, cette classe poss\xe8de une m\xe9thode qui va instancier une seconde classe qui est de type State. Une m\xe9thode importante ici sera la m\xe9thode Build qui va contenir notre arbre de widgets, comme on peut d'ailleurs le faire avec un StatelessWidget. La diff\xe9rence ici est que l'on pourra utiliser la fonction setState qui s'\xe9crit ainsi, et qui va nous permettre d'indiquer qu'un changement d'\xe9tat a eu lieu. Quand ce sera le cas, notre arbre de widgets sera \xe0 nouveau rafra\xeechi. On ferait ainsi \xe0 nouveau appel \xe0 notre m\xe9thode Build. Je vais commencer par cr\xe9er une variable d'instance dans cette classe qui h\xe9rite de la classe State, que je vais appeler isChecked qui sera de type Bool\xe9en. Pour initialiser cette variable, je pourrais le faire directement en mettant \xe0 false. Mais un StatefulWidget nous propose une m\xe9thode qui s'appelle initState. Je pourrais \xe0 l'int\xe9rieur faire la plupart de mes initialisation. Ainsi, je vais mettre isChecked \xe0 false. Par ailleurs, on ne va plus utiliser un Container, mais plut\xf4t un Row, puisque je vais mettre un CheckBox et \xe0 c\xf4t\xe9, un texte. Mon widget Row va prendre une liste d'enfants. Je vais commencer avec le CheckBox, qui va prendre deux param\xe8tres requis. La premi\xe8re sera une valeur. Je vais mettre ma variable isChecked. Le deuxi\xe8me param\xe8tre, onChanged, va \xeatre d\xe9clench\xe9 \xe0 chaque fois qu'un utilisateur va interagir avec ma CheckBox. Ce param\xe8tre-l\xe0 va demander une fonction qui, elle-m\xeame, a pour param\xe8tre un bool\xe9en. Je vais donc cr\xe9er une fonction anonyme ayant pour param\xe8tre un bool\xe9en que j'appellerai newValue. Et dans le corps de ma fonction, je mettrai que isChecked prend la nouvelle valeur, newValue. Enfin, \xe0 c\xf4t\xe9 de ma CheckBox, j'aurai un texte et j'y passerai un message. J'en profite \xe9galement pour red\xe9finir la taille de la police, fontSize que je vais mettre \xe0 35 et je vais cr\xe9er une variable message qui sera de type string. Elle sera initialis\xe9e avec la cha\xeene de caract\xe8res \xab Non activ\xe9 \xbb, puisque par d\xe9faut, isChecked est \xe0 faux. Ici, il faudra bien s\xfbr que je pense \xe0 modifier la variable message. Si isChecked est \xe0 vrai, alors, message prendra la cha\xeene de caract\xe8res \xab Activ\xe9 \xbb. Sinon, le message prendra la valeur \xab Non activ\xe9 \xbb. \xc0 pr\xe9sent, si je lance mon code, on a bien ma CheckBox, et \xe0 c\xf4t\xe9 mon texte. Si je clique sur ma CheckBox, malheureusement, rien n'appara\xeet. Cela est normal puisque nous n'avons pas inform\xe9 notre StatefulWidget qu'il fallait qu'il se rafra\xeechisse. Pour ce faire, je vais appeler la fonction setState et je vais couper-coller le code \xe9crit pr\xe9c\xe9demment. \xc0 pr\xe9sent, si je relance, notre widget Stateful fonctionne comme attendu."),(0,a.kt)("h3",{id:"cr\xe9er-des-boutons-et-g\xe9rer-les-actions-utilisateur"},"Cr\xe9er des boutons et g\xe9rer les actions utilisateur"),(0,a.kt)("p",null,"Nous allons voir comment utiliser des boutons, mais aussi comment ajouter la gestion d\u2019\xe9v\xe9nements sur n'importe quel widget Flutter. Pour commencer, nous avons un widget Center qui va nous centrer les diff\xe9rents widgets, suivi d'un widget Column qui nous disposera les widgets de mani\xe8re verticale. On va commencer avec le widget TextButton. Celui-ci prend deux param\xe8tres requis. Le onPressed qui prendra une fonction et qui permettra de dire quoi faire \xe0 chaque fois que l'on cliquera sur le bouton, ainsi qu'un second param\xe8tre qui est un child qui sera tout simplement un widget et qui permettra de mettre un contenu \xe0 notre bouton. Je vais donc commencer par une fonction anonyme pour dire quoi faire. Cette fonction anonyme sera ex\xe9cut\xe9e \xe0 chaque fois que l'on cliquera sur notre bouton et je vais afficher le mot clic. J'en profite pour pr\xe9ciser que je suis bien dans un StatelessWidget. Le fait de g\xe9rer l\u2019\xe9v\xe9nement ne me force pas ici \xe0 utiliser un StatefulWidget puisque je n'aurais pas besoin de rafra\xeechir l'\xe9cran. Si je voulais convertir par contre en StatelessWidget \xe0 StatefulWidget, il me suffirait de cliquer sur StatelessWidget, de venir s\xe9lectionner l'ampoule jaune et de cliquer sur Convert to StatefulWidget. Je vais ajouter comme widget child un texte o\xf9 je mettrai : Cliquez ici. Je vais formater rapidement et \xe0 pr\xe9sent, si j'ex\xe9cute mon code, on a bien notre bouton. Je vais afficher la console, donc, je vais sur Affichage > Console de d\xe9bogage, et quand je vais cliquer sur mon TextButton, j'ai bien le message clic. Il faut aussi savoir que dans des pr\xe9c\xe9dentes versions de Flutter, le TextButton avait pour \xe9quivalent le FlatButton. Ils se ressemblent, avec quelques diff\xe9rences. Par exemple, le fait de pouvoir utiliser la propri\xe9t\xe9 style, que l'on va voir dans quelques instants. Je vais ajouter un autre type de boutons qui s'appelle le OutlinedButton. Celui-ci \xe9tait dans les pr\xe9c\xe9dentes versions utilis\xe9es en tant que OutlineButton. Je vais r\xe9x\xe9cuter mon code et on voit qu'effectivement, j'ai le m\xeame bouton que le TextButton sauf que cette fois-ci, il a \xe9t\xe9 entour\xe9 d'un genre de liser\xe9. En cliquant dessus, \xe7a fonctionne. Enfin, un troisi\xe8me type qui est souvent utilis\xe9 est le ElevatedButton. Le ElevatedButton, son \xe9quivalent \xe9tait le RaisedButton. Celui-ci va avoir un bouton qui est un peu plus sur\xe9lev\xe9 et dont l'int\xe9rieur sera de couleur unie. Ainsi, si je souhaitais modifier l'apparence de ce dernier bouton, j'utiliserais la propri\xe9t\xe9 style. Celui-ci va prendre ce que l'on appelle un ButtonStyle qui va me permettre, par exemple, de pouvoir modifier le degr\xe9 d'\xe9l\xe9vation. Je serais tent\xe9 de mettre directement la valeur que je souhaite. Malheureusement, je devrai passer par un MaterialStateProperty. J'ajouterai le .all et je mettrai \xe0 l'int\xe9rieur ma valeur, admettons 10. On voit qu'ici, il y a cette notion d'\xe9l\xe9vation. Je peux aussi modifier la couleur qui est actuellement bleue, qui est d\xe9finie par mon th\xe8me par d\xe9faut, et je mettrai donc backgroundColor. Je vais juste revenir \xe0 la ligne. Et l\xe0 aussi, je ne pourrai pas utiliser, admettons, Colors.teal. Je devrais \xe0 nouveau passer par un MaterialStateProperty.all et \xe0 l'int\xe9rieur, mettre ma valeur. L'avantage des boutons, c'est qu'ils g\xe8rent nativement les \xe9v\xe9nements tels que le clic. N\xe9anmoins, je serai peut-\xeatre amen\xe9 \xe0 devoir utiliser d'autres \xe9v\xe9nements tels que le double clic, le drag and drop. Pour cela, je peux ajouter la gestion d\u2019\xe9v\xe9nements \xe0 n'importe quel de mes widgets. Je vais prendre, par exemple, un texte que je vais appeler Gestion d\u2019\xe9v\xe9nement, je vais mettre les doubles quotes. Et cette fois-ci, si je lance, j'ai bien mon texte qui s'affiche, mais bien \xe9videmment, je ne peux pas cliquer dessus. Je vais l'envelopper avec un nouveau widget qui s'appelle GestureDetector. Celui-ci peut d\xe9tecter de nombreux \xe9v\xe9nements tels que ceux que j'ai cit\xe9s pr\xe9c\xe9demment, le double clic ou encore le drag and drop. Je vais pour le simple clic utiliser le onTap. Ici, je mettrai une fonction anonyme et j'afficherai clic d\xe9tect\xe9. Je relance mon code. Et maintenant, si je clique sur mon texte Gestion d\u2019\xe9v\xe9nement, j'ai bien mon clic d\xe9tect\xe9 qui s'affiche sur la console. Nous avons ainsi vu comment utiliser des boutons Flutter, mais aussi comment ajouter la gestion d\u2019\xe9v\xe9nement sur n'importe quel widget Flutter."),(0,a.kt)("h2",{id:"r\xe9aliser-une-application-compl\xe8te-en-flutter"},"R\xe9aliser une application compl\xe8te en Flutter"),(0,a.kt)("h3",{id:"d\xe9couvrir-le-projet"},"D\xe9couvrir le projet"),(0,a.kt)("p",null,"Nous allons \xe0 pr\xe9sent d\xe9velopper enti\xe8rement une application Flutter. Je vais avant tout aller sur le site orangevalley caa.org puisqu'il s'agira d'une application permettant d'afficher une liste de vid\xe9os du site fictif orangevalley.caa. qui est une association d'arts diffusant des vid\xe9os faites par ses membres. L'API peut \xeatre observ\xe9e \xe0 cette adresse, donc orangevalleycaa.org/api /videos avec un S et on se verra retourner des informations au format Json. On pourrait ici utiliser un nombre de donn\xe9es telles que, bien \xe9videmment, l'URL de la vid\xe9o, le nom, la description ou encore, une image donnant son aper\xe7u. \xc0 pr\xe9sent, on va cr\xe9er notre projet Flutter. Je vais lancer Visual Studio Code et aller sur la palette de commandes. Ici, je taperai Flutter et je s\xe9lectionnerai Flutter: New Project. Je donnerai pour nom \xab orange_valley_caa, je s\xe9lectionnerai ensuite le dossier o\xf9 je souhaite sauvegarder mon projet et une fois mon projet g\xe9n\xe9r\xe9, je vais supprimer tout ce qui a en dehors de la fonction main. Je vais appeler mon application \xab OrangeValleyApp \xbb et je vais cr\xe9er un StatelessWidget qui sera donc OrangeValleyAppp. Celle-ci retournera un widget MaterialApp qui prendra pour Home, un widget que nous appellerons \xab HomePage \xbb. Je vais \xe0 pr\xe9sent aller au niveau du r\xe9pertoire lib, le s\xe9lectionner et cliquer sur l'ic\xf4ne permettant la cr\xe9ation d'un nouveau dossier. J'appellerai ce sous-dossier \xab pages \xbb, ensuite, je peux faire un clic droit : Nouveau fichier que j'appellerai home_page.dart. Ici, je taperai stl pour StatelessWidget et je cr\xe9erai mon widget HomePage. Il faudra que je fasse un import pour pouvoir utiliser le StatelessWidget, je vais donc utiliser le package material.dart et ma HomePage va retourner non pas un Container, mais un \xab Scaffold \xbb. Ici, je pr\xe9ciserai que l'on aura une appBar dont le titre sera le nom de l'association, donc Orange Valley CAA et au niveau du \xab body \xbb, je mettrai un Container vide. Enfin, je retournerai sur le main.dart, j'importerai ma HomePage, donc je clique sur l'ampoule et je s\xe9lectionne Import Library, et pour \xe9galement pouvoir supprimer le petit bandeau qu'il y a en haut \xe0 droite affichant le \xab debug \xbb, le mieux est peut-\xeatre que je lance l'application, je vais donc cliquer sur Run, je vais s\xe9lectionner mon \xe9mulateur et une fois l'application lanc\xe9e, je vais faire en sorte de supprimer ce petit bandeau debug. Pour ce faire, je vais aller au niveau de MaterialApp et je vais utiliser la propri\xe9t\xe9 debugShowCheckedModeBanner que je mettrai \xe0 False. Si je relance, la banni\xe8re a bien disparu. Maintenant que nous avons mis en place notre projet Flutter, nous voil\xe0 pr\xeats \xe0 \xe9crire notre application"),(0,a.kt)("h3",{id:"cr\xe9er-les-mod\xe8les-json"},"Cr\xe9er les mod\xe8les JSON"),(0,a.kt)("p",null,"Comme on peut le voir \xe0 l'\xe9cran, l'API que nous allons utiliser nous retourne des donn\xe9es sous le format JSON. Pour pouvoir exploiter ces donn\xe9es dans notre application, il nous faudra d\xe9coder ce JSON. On va laisser de c\xf4t\xe9 Visual Studio Code quelques instants pour aller sur le site \xab dartpad.dev \xbb. Avant de voir comment d\xe9coder du JSON, nous allons nous int\xe9resser \xe0 la collection Map. Une Map va contenir des cl\xe9s associ\xe9es \xe0 des valeurs, sachant que les cl\xe9s devront \xeatre uniques, tandis que les valeurs n'auront pas besoin de l'\xeatre. Je vais ainsi pr\xe9ciser que ma Map aura des cl\xe9s de type string et des valeurs associ\xe9es de type int. Ma Map s'appellera myMap et je l'initialiserai gr\xe2ce \xe0 une paire d'accolades. \xc0 l'int\xe9rieur, je pr\xe9ciserai le nom de ma premi\xe8re cl\xe9, je l'appellerai key1, suivi de deux points et de la valeur associ\xe9e. Je mettrai donc un entier ici, 100. Je cr\xe9erai une deuxi\xe8me cl\xe9, key2, et je mettrai la m\xeame valeur, \xe0 savoir 100. Pour conna\xeetre la valeur associ\xe9e \xe0 la cl\xe9 key1, je taperai myMap suivi d'une paire de crochets et du nom de la cl\xe9. J'utiliserai la fonction print, et en ex\xe9cutant le code, j'aurais bien 100 qui s'affiche \xe0 l'\xe9cran. Si j'avais voulu modifier la valeur de key1, je ferais \xab myMap","['key1']"," \xbb, et je lui effectuerais une nouvelle valeur. Ainsi, je pourrais mettre 200. Maintenant, si je relance, la valeur associ\xe9e \xe0 key1 sera bien de 200. Regardons \xe0 pr\xe9sent comment d\xe9coder du JSON. Je vais cr\xe9er une variable qui va contenir notre JSON. Je l'ai pr\xe9alablement pr\xe9par\xe9e. Pour pouvoir d\xe9coder ce JSON, je vais cr\xe9er une autre variable qui s'appellera jsonDecoded. Je taperai ensuite json.decode suivi du JSON \xe0 d\xe9coder. Il faudra bien s\xfbr penser \xe0 utiliser une librairie nous permettant d'appeler cette variable JSON. Pour ce faire, je ferai un import de dart:convert. Il faudra penser \xe9galement au point virgule. \xc0 pr\xe9sent, je peux afficher le contenu de jsonDecoded, et en ex\xe9cutant le code, on voit que le JSON a \xe9t\xe9 converti en Map. \xc0 pr\xe9sent, si je veux acc\xe9der \xe0 une valeur de ma Map, je ferai comme on l'a vu pr\xe9c\xe9demment, donc, je ferai jsonDecoded, crochets, et le nom de la cl\xe9. Je mettrai, par exemple, name. Je devrais ainsi avoir la valeur associ\xe9e Steeve. Enfin, si mon JSON repr\xe9sentait une personne, je pourrais cr\xe9er une classe Person puis d\xe9finir les diff\xe9rentes propri\xe9t\xe9s, donc, name et age, et utiliser un constructeur nomm\xe9 que j'appellerai fromJson. Ce constructeur prendra en param\xe8tre une Map que j'appellerai data et pour initialiser mes attributs, je ferai donc deux points, \xab name = data","['name']"," \xbb, la cl\xe9, virgule, \xab age = data","['age']"," \xbb, et je termine par un point virgule. Pour l'utiliser, il me suffira d'instancier ma classe Person, donc, = Person.fromJson. Je passe ma map, le json.Decoded, et \xe0 pr\xe9sent, je peux afficher une propri\xe9t\xe9 de person. Je vais afficher, par exemple, l'\xe2ge. Il est vrai ici que mon JSON est assez simple, et que, par cons\xe9quent, j'ai tout tap\xe9 \xe0 la main. Si le JSON \xe9tait beaucoup plus cons\xe9quent, cela deviendrait peut-\xeatre un petit peu r\xe9barbatif de devoir tout taper. Fort heureusement, il existe des sites qui permettent de g\xe9n\xe9rer automatiquement le code. On va aller sur un moteur de recherche, je vais taper json to dart, et s\xe9lectionner le site \xab quicktype \xbb. Ici, je s\xe9lectionnerai le langage de programmation, donc Dart. J'irai dans les options et d\xe9cocherai Detect enums. Enfin, je donnerai un nom \xe0 la classe qui devra \xeatre g\xe9n\xe9r\xe9e. Je mettrai video, je reviendrai sur mon JSON. Je ferai Cmd + A ou Ctrl + A sur Windows pour copier ensuite tout mon JSON. Je reviens sur le site \xab quicktype \xbb et je vais dans cette zone coller le JSON que j'ai copi\xe9. L'outil m'a ainsi non seulement g\xe9n\xe9r\xe9 la classe Video avec la conversion du JSON, mais il m'a \xe9galement g\xe9n\xe9r\xe9 des fonctions me permettant de r\xe9cup\xe9rer une liste de vid\xe9os \xe0 partir de JSON. Je vais \xe0 pr\xe9sent copier le code, donc, je clique sur Copy Code, et revenir sur Visual Studio Code. Pour organiser la structure de mon projet, je vais cliquer sur lib, cr\xe9er un nouveau r\xe9pertoire que j'appellerai models qui contiendra tous mes mod\xe8les tels que Video, par exemple, et je cr\xe9e un nouveau fichier que j'appellerai video.dart, \xe0 l'int\xe9rieur duquel je collerai le code qui a \xe9t\xe9 g\xe9n\xe9r\xe9. Dans cette vid\xe9o, nous avons vu comment utiliser une Map et comment d\xe9coder du JSON."),(0,a.kt)("h3",{id:"consommer-lapi"},"Consommer l'API"),(0,a.kt)("p",null,"Maintenant que nous pouvons d\xe9coder le format Json, nous allons pouvoir r\xe9cup\xe9rer es informations depuis l'API. Pour pouvoir utiliser une connexion internet, il faut savoir qu'il est n\xe9cessaire pour les appareils Android d'en demander explicitement la permission. Veuillez noter qu'en mode \xab debug \xbb, c'est-\xe0-dire en mode de d\xe9veloppement comme c'est actuellement le cas, cette demande n'est pas obligatoire. Mais elle le deviendra si vous voulez publier votre application. On va ainsi aller dans le r\xe9pertoire android > app > src > main et enfin, ouvrir le fichier AndroidManifest.xml. Ici, il faudra aller tout en bas du fichier et juste apr\xe8s le tag de fermeture application, ajouter la ligne suivante uses_permission pour la permission internet. Je finirai par sauvegarder les modifications et j'irai ensuite sur mon r\xe9pertoire lib pour cr\xe9er un sous-r\xe9pertoire que j\u2019appellerai \xab services \xbb. \xc0 l'int\xe9rieur duquel je cr\xe9erai un nouveau fichier que j\u2019appellerai \xab video_api.dart \xbb. Dans ce fichier, je cr\xe9erai une fonction qui permettra de r\xe9cup\xe9rer le Json depuis l'API. N\xe9anmoins, pour r\xe9cup\xe9rer des donn\xe9es sur internet, nous allons devoir ajouter \xe0 Flutter un package ; un package, c'est tout simplement une librairie, une biblioth\xe8que partag\xe9e. On ira sur le site officiel pub.dev et on recherchera HTTP. Ici, on utilisera donc ce package et on ira cliquer sur l'onglet \xab Installing \xbb. On pourra ainsi r\xe9cup\xe9rer la d\xe9pendance \xe0 ajouter \xe0 notre fichier de configuration pubspec.yaml. Je reviens donc sur Visual Studio Code et je vais aller sur mon fichier de configuration. Il faudra bien copier au m\xeame niveau que Flutter. N'oubliez pas que en YAML, l'indentation a son importance. Je vais sauvegarder pour que l'ajout du package soit pris en consid\xe9ration et je vais ensuite retourner sur le site pub.dev pour avoir plus d'information sur la mani\xe8re d'utiliser ce package. Il faudra que j'importe cette ligne-l\xe0. On voit aussi que ma fonction devra \xeatre async puisque la requ\xeate se fera de mani\xe8re asynchrone et la partie la plus importante est ici. Je pourrais faire http.get avec l'URL en param\xe8tre si le code de retour est \xe9gal \xe0 200, donc si la requ\xeate s'est faite sans \xe9chec avec succ\xe8s, je pourrais d\xe9coder mon fichier Json. Je vais donc copier les lignes suivantes et les ajouter \xe0 notre code pour pouvoir le configurer. Je vais donc ici, je vais d'abord peut-\xeatre cr\xe9er ma fonction. Cette fonction-l\xe0, je vais l'appeler \xab getVideos FromApi \xbb. Et dans le corps, je collerai ce que j'ai copi\xe9. Bien \xe9videment, le fait d'utiliser un await fait que je dois mettre ici un async. Aussi, je devrai faire l'import, donc je vais copier la ligne suivante et l'ajouter \xe0 mon code. Je vais ajouter quelques modifications, par exemple ici, supprimer le corps, ici aussi, je vais \xe9galement ajouter mon URL. Pour ce faire, je vais cr\xe9er une constante que j'appellrai \xab url \xbb et qui prendra mon URL. Quand l'URL aura \xe9t\xe9 faite avec succ\xe8s je pourrai r\xe9cup\xe9rer mon Json de la mani\xe8re suivante, donc var json response.body. Il me restera plus qu'\xe0 l'exploiter. Je ferai donc un \xab return videos \xbb, je me souviens plus tr\xe8s bien exactement du terme que l'on avait utilis\xe9, donc je vais retourner ici, c'est videoFromJson, je retourne sur le fichier et je mettrai \xab return videoFromJson \xbb de mon Json. Il faudra que je pense \xe0 importer la librairie et dans le cas contraire, dans le cas o\xf9 vous aurez une erreur au niveau du r\xe9seau je retournerais une liste vide. Pour pouvoir tester mon code, je vais aller sur ma HomePage et ici, je vais appeler getVideosFromApi.then ; il y a un probl\xe8me, c'est normal. J'ai oubli\xe9 une chose, c'est d'indiquer quel est le type de retour. Ici, nous allons retourner un Future qui retournera la m\xeame chose que videosFromJson, donc une liste de vid\xe9os. Je vais donc mettre \xab Future Videos \xbb. Si je reviens sur homepage.dart, \xe0 pr\xe9sent, je pourrai faire un then puisqu'il me retourne un Future. Ici la valeur, \xe7a sera la liste des vid\xe9os et je ferai tout simplement un print sur value .length, pour obtenir le nombre d'\xe9l\xe9ments qu'i y a dans ma liste. Je vais sauvegarder et lancer mon code. Pour voir le r\xe9sultat, il faudra quand m\xeame que je veille \xe0 afficher la console de d\xe9bogage, donc je vais sur Affichage > Console de d\xe9bogage. "),(0,a.kt)("h3",{id:"afficher-une-grille-dimages-gr\xe2ce-\xe0-une-gridview"},"Afficher une grille d'images gr\xe2ce \xe0 une GridView"),(0,a.kt)("p",null,"Nous allons voir comment on peut cr\xe9er l'interface de notre \xab Home Page \xbb. Pour cela, nous allons cr\xe9er une liste affichant une vignette de chaque vid\xe9o avec son titre. N\xe9anmoins, nous n'utiliserons pas une ListView, mais plut\xf4t une GridView. Cette derni\xe8re va afficher les \xe9l\xe9ments qu'elle contient, non pas de mani\xe8re \xe0 en avoir un par ligne, m\xeame si cela est possible, mais elle aura plusieurs \xe9l\xe9ments par ligne. Dans l'explorateur de fichier ici \xe0 gauche, on peut voir en vert les r\xe9pertoires et les fichiers que j'ai cr\xe9\xe9s. Dans Utils, j'ai affich\xe9 constants.dart qui va centraliser mes constantes que je pourrais r\xe9utiliser dans mon application. J'y ai ainsi mis une constante backgroundColor qui permettra de d\xe9finir la couleur d'arri\xe8re-plan. Dans le fichier helper.dart, j'ai cr\xe9\xe9 une fonction temporaire que j'ai appel\xe9e \xab getFakeVideos \xbb et qui va nous retourner une liste de vid\xe9os. Cette liste est un simple extrait de notre API. Et cela va nous \xe9viter pour le moment de faire des requ\xeates pour se focaliser uniquement sur l'interface utilisateur. Enfin, j'ai mis un dernier r\xe9pertoire : le r\xe9pertoire widgets qui contiendra tous les widgets qu'on est susceptible de cr\xe9er. Le fichier qu'il contient, donc le fichier video_grid.dart aura tout le code de notre GridView. On va revenir sur le widget home page et on va d\xe9finir les couleurs de cette page-l\xe0. Donc, dans mon Container, je vais mettre Color et je vais utiliser la constante que j'ai cr\xe9\xe9e. Ensuite, je vais en profiter pour d\xe9finir une couleur de la barre, donc j'utiliserai la propri\xe9t\xe9 backgroundColor et je mettrai Colors.black. Je vais reformater mon code. Si je lance mon application, les couleurs ont bien \xe9t\xe9 appliqu\xe9es. Je vais \xe0 pr\xe9sent, dans mon container, utiliser le widget que j'ai cr\xe9\xe9, \xe0 savoir, le widget VideosGrid. Celui-ci prend en param\xe8tre une liste de vid\xe9os et pour r\xe9cup\xe9rer cette liste, je vais utiliser la fonction que j'ai cr\xe9\xe9e ici : getFakeVideos. Je vais donc l'appeler directement getFakeVideos. Ici, je lance notre code, on a bien notre GridView qui s'affiche. On constate que nous avons deux \xe9l\xe9ments par ligne et que pour chaque \xe9l\xe9ment, nous avons une vignette qui s'affiche avec le titre en bas de la vid\xe9o. Maintenant, regardons de plus pr\xeat le code de VideosGrid. Je vais donc aller dans widgets et ouvrir le fichier videos_grid.dart. Ici, on a deux classes : une premi\xe8re classe VideosGrid et une seconde qui est dans le m\xeame fichier : _VideoTile. On va commencer avec VideosGrid qui est un StatelessWidget. VideosGrid va prendre une liste de vid\xe9os qui sera initialis\xe9e dans le constructeur et dans la m\xe9thode build, on va retourner une GridView.count. GridView.count va prendre un premier param\xe8tre crossAxisCount qui nous permettra de d\xe9finir le nombre d'\xe9l\xe9ments par ligne. Par exemple, si \xe0 la place de deux, je vais bien mettre trois, j'aurai au maximum trois \xe9l\xe9ments par ligne. Je reviens sur deux. Il faudra bien \xe9videmment d\xe9finir les widgets enfin qui sont ici au nombre de quatre. Pour ce faire, je vais parcourir la liste vid\xe9os. Pour chaque vid\xe9o, je vais retourner le widget _VideoTile qui est d\xe9fini juste en dessous et qui va prendre en param\xe8tre l'URL de l'image, de la \xab thumbnail \xbb ainsi que le nom de la vid\xe9o. Regardons maintenant _VideoTile qui l\xe0 aussi, est un StatelessWidget, donc on ne pourra pas faire appel, par exemple, \xe0 la fonction setState. On remarquera aussi que _VideoTile a un underscore, ce qui en fait une classe priv\xe9e, donc je ne pourrai pas utiliser _VideoTile en dehors du fichier videogrid.dart, je ne pourrais pas par exemple, l'utiliser dans homepage.dart. _VideoTile va avoir donc sa m\xe9thode build qui va utiliser un \xab padding \xbb. Le padding va nous permettre de mettre de l'espace entre les diff\xe9rents \xe9l\xe9ments, que ce soit \xe0 droite, \xe0 gauche, en haut ou en bas. Pour cela, j'ai mis une valeur de dix. Ensuite, pour pouvoir superposer l'image avec le titre, j'ai utilis\xe9 une \xab stack \xbb. J'aurai donc deux parties : la partie Image qui sera un Container et une partie Titre o\xf9 j'utiliserai un Aligne. Commen\xe7ons avec l'image. L'image sera donc un Container pour lequel j'ai ajout\xe9 un ClipRRect. Le ClipRRect va d\xe9couper mon Container et j'utiliserai un rebord arrondi. Ici, je lui mettrai une valeur de huit. Enfin, pour r\xe9cup\xe9rer l'image, j'utiliserai Image.network. La seconde partie sera le Titre. J'utilise Aligne pour pouvoir dans ma stack, indiquer \xe0 quel endroit je dois placer justement le container qui est juste en dessous. Ici, j'ai indiqu\xe9 en bas au centre. Mon container aura une couleur d'arri\xe8re-plan de type noir avec une opacit\xe9 \xe0 0,6 pour donner un effet semi-transparent. La hauteur de ce container sera fixe et sera de 35 et je mettrai un texte qui sera bien s\xfbr centr\xe9 et qui aura pour cha\xeene de caract\xe8res, le Titre qui est pass\xe9 en param\xe8tre au niveau du constructeur. Notre GridView \xe9tant maintenant construite, nous allons \xe0 pr\xe9sent pouvoir r\xe9cup\xe9rer les donn\xe9es de l'API et les injecter directement dans notre GridView."),(0,a.kt)("h3",{id:"utiliser-un-futurebuilder-pour-alimenter-une-gridview"},"Utiliser un FutureBuilder pour alimenter une GridView"),(0,a.kt)("p",null,"Dans cette vid\xe9o, regardons comment alimenter notre GridView gr\xe2ce aux donn\xe9es envoy\xe9es par l'API. Une premi\xe8re fa\xe7on de faire est de convertir notre HomePage en StatefulWidget. Une fois les donn\xe9e r\xe9cup\xe9r\xe9es, on demandera \xe0 notre widget de se rafra\xeechir. Je vais donc cliquer sur StatelessWidget et le transformer en StatefulWidget. Dans la classe HomePageState, je vais rajouter une variable d'instance que j'appellerai \xab video \xbb et qui sera initialis\xe9e avec une ListView, puis une fois les donn\xe9es r\xe9cup\xe9r\xe9es depuis l'API, je vais faire un setState et pr\xe9ciser que videos va prendre la nouvelle valeur. Enfin, je veillerai \xe0 supprimer getFakeVideos pour le remplacer avec notre variable videos. Si je lance notre application, on a bien les donn\xe9es r\xe9cup\xe9r\xe9es depuis notre API qui s'affichent \xe0 l'\xe9cran. Cette m\xe9thode est fonctionnelle, mais Flutter nous apporte une autre fa\xe7on de faire gr\xe2ce \xe0 l'utilisation du widget FutureBuilder. Un FutureBuilder va appeler une fonction retournant un futur et d\xe8s qu'un r\xe9sultat sera g\xe9n\xe9r\xe9, par exemple succ\xe8s, une erreur ou tout simplement, l'attente d'une r\xe9ponse, on pourrait d\xe9cider quoi en faire. Ainsi, le FutureBuilder va nous donner plus de souplesse. Je vais revenir \xe0 la version Stateless du HomePage pour introduire le FutureBuilder. Je vais supprimer l'appel \xe0 getVideosFromApi et remplacer VideosGrid par un FutureBuilder. Je vais donc mettre FutureBuilder suivi de la virgule, je vais pr\xe9ciser gr\xe2ce \xe0 la propri\xe9t\xe9 Future, de quelle mani\xe8re je vais r\xe9cup\xe9rer mes donn\xe9es. Donc ici, il s'agira de getVideosFromApi, ensuite, je passerai un Builder qui prendra deux param\xe8tres : context et snapshot et dans le corps de cette fonction anonyme, je pr\xe9ciserai que si le snapshot point connectionState, donc si l'\xe9tat de la connexion est \xe9gal \xe0 ConnectionState.waiting, donc si on est en attente de la r\xe9cup\xe9ration des donn\xe9es, dans ce cas-l\xe0, je retournerai un widget qui sera centr\xe9 et qui sera un CircularProgressIndicator. C'est \xe9galement ce que l'on appelle un \xab spinner \xbb. Sinon, si le snapshot contient des erreurs, donc hasError, dans le cas par exemple, o\xf9 il y a un probl\xe8me de connexion, dans ce cas-l\xe0, je retournerai l\xe0 aussi, un center et je mettrai tout simplement un texte qui affichera l'erreur. Donc, snapshot.error. Enfin, il faut le point virgule. Enfin, dans les autres cas, donc dans le cas o\xf9 tout se passe bien, je retournerai ma VideosGrid en passant bien s\xfbr, le param\xe8tre videos et l\xe0, je lui mettrai snapshot.data. Je vais reformater le code et je vais tout relancer, je ferai un \xab hot restart \xbb. J'ai une erreur, il va falloir que je supprime une parenth\xe8se en trop, je recommence. On voit ici tr\xe8s bri\xe8vement qu'il y a eu le spinner qui s'est affich\xe9 et enfin, on a r\xe9cup\xe9r\xe9 nos donn\xe9es. Nous avons ainsi vu dans cette vid\xe9o, comment r\xe9cup\xe9rer les donn\xe9es gr\xe2ce \xe0 notre fonction getVideosFromApi de deux fa\xe7ons : soit en utilisant un StatefulWidget ou encore, \xe0 travers l'utilisation d'un FutureBuilder."),(0,a.kt)("h3",{id:"cr\xe9er-un-\xe9cran-affichant-les-d\xe9tails-dune-vid\xe9o"},"Cr\xe9er un \xe9cran affichant les d\xe9tails d'une vid\xe9o"),(0,a.kt)("p",null,"Nous allons concevoir la page affichant les d\xe9tails d'une vid\xe9o o\xf9 nous nous focaliserons uniquement sur la partie interface utilisateur. Pour ce faire, nous n'allons pas pour le moment, utiliser les donn\xe9es r\xe9cup\xe9r\xe9es depuis l'API, mais nous allons plut\xf4t r\xe9utiliser la liste retourn\xe9e par notre fonction getFakeVideos. Dans une autre vid\xe9o, nous voyons comment passer de la page HomePage \xe0 la page DetailsPage qui est le widget que nous allons voir ici. Il faudra donc temporairement modifier le premier widget de l'application qu'on appelle aussi \xab root widget \xbb qui dans le cas pr\xe9sent, s'appelle \xab OrangeValleyApp \xbb. Ce dernier ne lancera donc pas HomePage, mais plut\xf4t DetailsPage. Ce widget prendra en param\xe8tre une vid\xe9o, on appellera donc getFakeVideos et on r\xe9cup\xe9rera la derni\xe8re vid\xe9o de la liste. Si je lance l'application, on a bien les d\xe9tails de la vid\xe9o qui s'affichent \xe0 l'\xe9cran. \xc0 pr\xe9sent, ouvrons justement cette page. J'\xe9cris un nouveau fichier dans le sous-r\xe9pertoire page que j'ai appel\xe9 \xab details_page \xbb. En l'ouvrant, on voit que ce fichier est constitu\xe9 de plusieurs widgets qui sont de type Stateless. Ainsi, si je reviens au d\xe9but, on va commencer avec donc details_page qui est notre page qui va \xeatre lanc\xe9e ; details_page prend donc une vid\xe9o en param\xe8tre et va cr\xe9er le \xab Scaffold \xbb. On va ainsi avoir la barre qui va prendre pour titre le nom de la vid\xe9o ainsi que un \xab body \xbb qui sera un \xab Container \xbb dont la couleur sera notre constante backgroundColor. et qui prendra pour enfant, un widget qui s'appelle \xab _VideoDetail \xbb. Celui-ci est juste en dessous, _VideoDetail va \xeatre constitu\xe9 d'une ListView. Une ListView dand le sens o\xf9 peut-\xeatre que les \xe9l\xe9ments qui seront affich\xe9s seront beaucoup plus grands que la taille de l'\xe9cran par exemple, si on a une description trop longue. Du coup, le ListView nous permettra de pouvoir \xab scroller \xbb de haut en bas. Cette ListView va avoir un widget DetailsPoster qui va afficher l'image du haut. Ensuite, un SizedBox qui va simuler un espace entre l'image et la description, on a donc bien s\xfbr la description juste apr\xe8s. \xc0 nouveau, un SizedBox qui est un peu plus grand et enfin, on terminera avec les \xab key words \xbb, les mots-cl\xe9s qui seront affich\xe9s gr\xe2ce \xe0 ce que l'on appelle des \xab Chips \xbb qui sont des widgets affichant une forme ovale. Si je regarde maintenant le contenu de DetailsPoster, je vois que celui-ci prend une URL qui est bien \xe9videment l'URL de l'image et va tout simplement avoir un Container avec une hauteur de 200 et va afficher l'image gr\xe2ce \xe0 Image.network et adaptera cette image-l\xe0 en fonction de la largeur. Ensuite, en dessous de l'image, on aura la description. La description cette fois-ci, sera une m\xe9thode qui sera contenue dans la classe _VideoDetails. Elle se trouve juste ici, c'est une m\xe9thode qui retourne un widget et qui se contente simplement d'afficher le contenu de video.description. La question qui peut se poser est pourquoi ici j'utilise mes m\xe9thodes de retourner un widget ? Tandis que pour le poster ou m\xeame pour les autres \xe9l\xe9ments, j'utilise des Stateless widgets. Tout simplement parce que je souhaitais vous montrer qu'il y a les deux possibilit\xe9s, sachant qu'il est fortement recommand\xe9 de cr\xe9er plut\xf4t des Stateless widgets en lieu et place de m\xe9thodes retournant des widgets. Si on continue au-del\xe0 de la description, on termine avec les keywords. Les keywords vont utiliser bien \xe9videmment un centrage, on va essayer de centrer les diff\xe9rents \xe9l\xe9ments. Mais la partie qui est int\xe9ressante sera le \xab Wrap \xbb, le Wrap va permettre d'\xe9viter \xab l'Overflow \xbb. Dans le sens o\xf9 s'il y a trop d'\xe9l\xe9ments et que ceux-ci ne peuvent se contenir dans la largeur de notre \xe9cran, le Wrap va venir les mettre \xe0 la ligne suivante. Aussi, les keywords, on nous les retourne sous forme de cha\xeenes de caract\xe8res s\xe9par\xe9es par des virgules. J'ai donc utilis\xe9 keywords.split pour nous cr\xe9er une nouvelle liste o\xf9 chaque \xe9l\xe9ment sera s\xe9par\xe9 par la virgule. Je vais ainsi parcourir cette nouvelle liste et afficher gr\xe2ce au widget Chip, le genre qui nous est retourn\xe9. Dans cette vid\xe9o, nous avons vu ainsi comment cr\xe9er notre page de d\xe9tail d'une vid\xe9o."),(0,a.kt)("h3",{id:"ajouter-et-utiliser-une-police-d\xe9criture"},"Ajouter et utiliser une police d'\xe9criture"),(0,a.kt)("p",null,"Dans cette vid\xe9o, nous allons voir comment ajouter et utiliser de nouvelles polices de caract\xe8res. En effet, dans la description actuelle, nous utilisons une police de caract\xe8res par d\xe9faut. On va ainsi commencer par cr\xe9er un nouveau dossier dans notre r\xe9pertoire que l'on appellera fonts. Le nom importe peu et nous irons ensuite sur Internet et ferons une recherche sur google fonts. De l\xe0, je s\xe9lectionnerai le site Google Fonts et je ferai une recherche sur la police Castoro. Ici, il ne me restera plus qu'\xe0 la s\xe9lectionner et \xe0 t\xe9l\xe9charger les fichiers. Une fois le t\xe9l\xe9chargement termin\xe9, nous serons en pr\xe9sence de deux fichiers TTF, l'un pour le style normal et l'autre pour le style italique. Je vais ainsi d\xe9placer les fichiers t\xe9l\xe9charg\xe9s. Je vais donc l\xe9g\xe8rement d\xe9placer mon explorateur de fichiers. S\xe9lectionner les deux fichiers et les d\xe9placer. Maintenant, il va falloir que je modifie mon fichier \xab pubspec.yaml \xbb pour l'informer que j'ai ajout\xe9 deux nouveaux fichiers. Je descendrai ici jusqu'\xe0 la partie flutter et j'ajouterai, en prenant bien \xe9videmment en compte l'indentation : \xab fonts: \xbb, je mettrai en dessous un \xab - family \xbb et je mettrai Castoro. Le nom de la famille importe peu, vous pouvez utiliser le nom que vous souhaitez. Je peux, par exemple, mettre CastoroCustom. Ensuite en dessous, je rajouterai \xab fonts: \xbb suivi d'un tiret, et je mettrai asset, puis le chemin jusqu'\xe0 ma police. Ici, \xe7a sera donc \xab Castoro-italic.ttf \xbb. Et je pr\xe9ciserai qu'il s'agit d'un style italique. Je copierai cette ligne pour ajouter la seconde police qui, par contre, cette fois-ci sera normale, sera r\xe9guli\xe8re. Ensuite, j'irai sur ma page de d\xe9tail. Pour ajouter la nouvelle police, j'irai donc dans le style et je mettrai fontFamily, et l\xe0, j'avais mis CastoroCustom. Je v\xe9rifie que je ne me suis pas tromp\xe9. CastoroCustom, pour \xeatre s\xfbr, je vais le copier-coller. Et \xe0 pr\xe9sent, je vais lancer notre application. Pour que l'ajout de la police soit pris en consid\xe9ration, il va falloir que je coupe l'application et que je la relance. On voit \xe0 pr\xe9sent que la police a \xe9t\xe9 modifi\xe9e. Pour utiliser le style italique, je mettrai fontStyle et l\xe0, je mettrai \xab FontStyle.italic \xbb. J'ai oubli\xe9 la virgule au-dessus. Si je sauvegarde, le style italique a \xe9t\xe9 utilis\xe9. Avant de terminer, je souhaite pr\xe9ciser qu'il y a un package qui fait la m\xeame chose. Ainsi, si je vais sur pub.dev et que je tape google fonts, on voit qu'il y a un package, d'ailleurs, qui est parmi les Flutter Favorite. Donc, vous pouvez vraiment l'utiliser avec confiance et qui fait exactement la m\xeame chose que ce que nous venons de faire, mais de mani\xe8re simplifi\xe9e."),(0,a.kt)("h3",{id:"naviguer-entre-les-\xe9crans"},"Naviguer entre les \xe9crans"),(0,a.kt)("p",null,"Nous allons apprendre \xe0 naviguer entre les diff\xe9rentes pages de notre application. Dans notre fichier main.darts, on commencera par remettre le widget HomePage comme \xe9tant la premi\xe8re page affich\xe9e \xe0 l'\xe9cran. Pour pouvoir ouvrir le d\xe9tail d'une vid\xe9o, il nous faudra dans un premier temps, d\xe9tecter le clic sur les diff\xe9rents \xe9l\xe9ments de la GridView, puis dans un second temps, on ouvrira la page de d\xe9tail en lui transmettant un objet vid\xe9o. On va ouvrir notre widget VideosGrid pour faire en sorte que chaque \xe9l\xe9ment de type VideoTile puisse \xeatre cliquable. On utiliserait ainsi un GestureDetector. Je vais donc s\xe9lectionner VideoTile ici et cliquer sur l'ampoule pour enfin s\xe9lectionner Wrap with widget. Ici, je mettrai GestureDetector et j'utiliserai la propri\xe9t\xe9 onTap pour d\xe9tecter un clic. J'afficherai un simple message : clic. Ainsi, si je relance notre code, j'en profite pour afficher la console de d\xe9bogage et en cliquant sur un des \xe9l\xe9ments VideoTile, j'ai bien le message clic qui s'affiche. Nous allons remplacer notre print par l'utilisation d'un Navigator qui permettra d'afficher \xe0 l'\xe9cran une nouvelle page. Je mets donc Navigator point push. Je devrai ici donner un contexte et une route. Pour cette derni\xe8re, j'utiliserai un Material PageRoute. Celui-ci assurera \xe9galement l'animation de transition entre les deux pages et retournera la page de d\xe9tail. Je vais donc mettre le contexte pour retourner mon DetailsPage qui prend en param\xe8tre une vid\xe9o qui est celle qui est affich\xe9e actuellement. Je vais juste faire un import. \xc0 pr\xe9sent, si je lance notre code et que je clique sur un des \xe9l\xe9ments, j'ai bien la page de d\xe9tail qui s'affiche. Nous avons ainsi vu comment communiquer entre deux pages diff\xe9rentes de notre applications. On peut am\xe9liorer l'affichage en utilisant ce que l'on appelle un \xab Hero \xbb. Un Hero est tout simplement une animation qui va agr\xe9menter la transition d'une page \xe0 l'autre. Pour l'utiliser, je vais aller dans la partie repr\xe9sentant mon VideoTile, en particulier, la section concernant l'image. Ici, je vais envelopper mon Container avec un widget Hero. Ce widget va prendre un param\xe8tre qui est l'argument tag. Ici, je devrais donner un identifiant unique pour pouvoir faire la correspondance entre les deux Hero : celui de la premi\xe8re page et celui de la seconde page ; j'utiliserai imageUrl. \xc0 pr\xe9sent, je vais dans DetailsPage et je vais faire la m\xeame chose pour l'image. Je vais donc venir ici, je vais cr\xe9er un Hero, j'ajoute le tag et je pr\xe9cise ce que tag est posterUrl. Je vais \xe0 pr\xe9sent sauvegarder, je reviens en arri\xe8re et quand je vais cliquer, j'ai bien la transition qui se fait de mani\xe8re beaucoup plus fluide. Dans cette vid\xe9o, nous avons ainsi vu comment naviguer au sein de notre application et comment utiliser le widget Hero."),(0,a.kt)("h3",{id:"proposer-un-menu-pour-modifier-laffichage"},"Proposer un menu pour modifier l'affichage"),(0,a.kt)("p",null,"Nous allons voir comment ajouter des actions \xe0 une AppBar. J'ai ajout\xe9 du code \xe0 notre application pour pouvoir filtrer les vid\xe9os selon l'identifiant qui est le filtre Par d\xe9faut ou bien Par nom ou Par dur\xe9e. On va \xe0 pr\xe9sent ouvrir le fichier \xab helper.dart \xbb. J'ai cr\xe9\xe9 ce que l'on appelle une \xe9num\xe9ration gr\xe2ce au mot cl\xe9 enum, suivi du nom de mon \xe9num\xe9ration que j'appellerai VideoSort. Celle-ci ne pourra contenir que trois valeurs qui correspondent aux trois types de filtres que l'API accepte. Pour acc\xe9der, par exemple, au nom, donc ici, name, je ferai VideoSort.name. Aussi, pour r\xe9cup\xe9rer la valeur s\xe9lectionn\xe9e dans l'\xe9num\xe9ration, mais \xe9galement \xe0 titre d'exemple, j'ai cr\xe9\xe9 une extension sur VideoSort, le nom importe peu, mais le plus important \xe0 retenir, c'est que celle-ci va venir enrichir l'\xe9num\xe9ration de nouvelles fonctionnalit\xe9s. Je pourrais ainsi, gr\xe2ce \xe0 filterName, pouvoir r\xe9cup\xe9rer seulement le nom et non pas VideoSort.name. En allant \xe0 pr\xe9sent dans video_api.dart, on voit que j'ai ajout\xe9 un param\xe8tre nomm\xe9 \xe0 notre fonction qui, par d\xe9faut, s\xe9lectionnera le filtre par identifiant. J'ai \xe9galement modifi\xe9 l'URL en cons\xe9quence pour indiquer \xe0 l'API quel type de filtre je souhaite r\xe9cup\xe9rer. Enfin, dans la HomePage, \xe0 travers la propri\xe9t\xe9 actions qui prend une liste de widgets, j'ai cr\xe9\xe9 un PopupMenuButton qui me permet d'afficher une ic\xf4ne de filtre, comme on peut le voir ici. Le Offset que j'utilise ici permet d'afficher cette Popup en dessous de la barre pour avoir un meilleur aspect visuel. Puis, j'ai d\xe9fini les diff\xe9rentes possibilit\xe9s de filtres gr\xe2ce \xe0 des widgets PopupMenultem. Je vais \xe0 pr\xe9sent de voir transformer ma HomePage en StatefulWidget pour pouvoir rafra\xeechir les donn\xe9es, chaque fois qu'un filtre sera s\xe9lectionn\xe9. Je proc\xe8de donc \xe0 la conversion comme on a l'habitude de le faire, et je vais ajouter une variable d'instance que je vais appeler _selectedFilter. Par d\xe9faut, celle-ci prendra la valeur VideoSort.id. PopupMenuButton ici prend une propri\xe9t\xe9 qui s'appelle onSelected. Celle-ci va faire appel \xe0 une fonction. Je vais l'appeler onChangeFilter et je vais demander \xe0 VS Code de me g\xe9n\xe9rer la m\xe9thode. \xc0 pr\xe9sent, je vais d\xe9finir le corps de cette nouvelle m\xe9thode. Alors ici, je mettrai non pas value, mais plut\xf4t choice que je trouve plus parlant, et je vais dire que si le nouveau choix s\xe9lectionn\xe9 est diff\xe9rent de selectedFilter donc, on va \xe9viter ainsi de devoir rafra\xeechir notre arbre de widgets si ce n'est pas utile, je ferai donc un setState o\xf9 j'indiquerai que selectedFilter prend la nouvelle valeur, donc choice. Il faudra aussi que au niveau de mon FutureBuilder, j'indique qu'\xe0 pr\xe9sent, j'ai un filtre qui est selectedFilter. Je ne pourrais pas faire du hot reload, je devrais red\xe9marrer l'application pour que les changements soient pris en consid\xe9ration. \xc0 pr\xe9sent, si je s\xe9lectionne un nouveau filtre et non pas celui Par d\xe9faut, par exemple, Par nom, j'ai bien ma GridView qui est rafra\xeechi. Je vais essayer avec la dur\xe9e. Tout fonctionne comme on l'esp\xe9rait. Dans cette vid\xe9o, nous avons ainsi vu comment ajouter des actions \xe0 une AppBar, mais nous avons \xe9galement vu comment cr\xe9er une \xe9num\xe9ration ou une extension."),(0,a.kt)("h3",{id:"assurer-la-lecture-vid\xe9o"},"Assurer la lecture vid\xe9o"),(0,a.kt)("p",null,"Notre application serait incompl\xe8te sans la pr\xe9sence de la lecture vid\xe9o. Nous allons ainsi voir comment l'impl\xe9menter. Pour pouvoir lire les vid\xe9os, il faudra faire appel \xe0 un package ajoutant cette fonctionnalit\xe9. Retournons sur pub.dev, on va saisir le mot-cl\xe9 \xab vid\xe9o \xbb sachant que le package officiel est \xab video_player \xbb. N\xe9anmoins, nous allons utiliser la package Chewie qui est bas\xe9 lui-m\xeame sur video_player, mais qui en facilite son utilisation. Pour l'installer, on proc\xe9dera de la mani\xe8re habituelle en cliquant sur l'onglet \xab Installing \xbb et en copiant la ligne suivante dans notre fichier pubspec.yaml. Une fois la ligne ajout\xe9e, il ne faudra pas oublier de sauvegarder les modifications, de couper l'application si elle est d\xe9j\xe0 lanc\xe9e, puis de la relancer. Voyons \xe0 pr\xe9sent le r\xe9sultat obtenu \xe0 partir des ajouts de code effectu\xe9s. Je vais donc s\xe9lectionner une vignette, je vais prendre celle-ci et sur la nouvelle page de d\xe9tail d'une vid\xe9o, on voit que une ic\xf4ne de lecture a \xe9t\xe9 ajout\xe9e. Je vais ainsi ouvrir details_page.dart et aller sur le widget g\xe9rant l'affichage de l'image. Ici, sur DetailsPoster, on voit que j'ai utilis\xe9 un GestureDetector pour pouvoir d\xe9tecter le clic qui se fera sur l'image. Une fois le clic d\xe9tect\xe9, celui-ci, le GestureDetector, nous permettra d'ouvrir la nouvelle page qui s'appelle \xab VideoPlayerScreen \xbb et qui prend en param\xe8tre, l'URL de la vid\xe9o. Pour avoir l'URL de la vid\xe9o, il a fallu ajouter un nouveau champ : videoUrl qui sera initialis\xe9 dans notre constructeur. Pour pouvoir \xe9galement faire cet effet superpos\xe9 de l'image avec l'ic\xf4ne de lecture, on a utilis\xe9 une \xab stack \xbb o\xf9 on a en premi\xe8re partie de l'image, comme ce que nous avions pr\xe9c\xe9demment, ainsi que l'ic\xf4ne de lecture. Pour avoir une taille aussi grande, il a fallu d\xe9finir la propri\xe9t\xe9 Size \xe0 200 et modifier la couleur en utilisant du blanc. Si je clique \xe0 pr\xe9sent sur la lecture, j'ai bien mon VideoPlayer qui s'affiche ici. On va aller voir justement cette nouvelle page. J'ai ajout\xe9 un video_player_page.dart qui va contenir un widget de type Stateful et qui va avoir quelques parties int\xe9ressantes, \xe0 savoir un Controller qui va \xeatre un VideoPlayerController qui va prendre en param\xe8tre l'URL de l'image que l'on veut r\xe9cup\xe9rer. D'ailleurs, j'en profite pour pr\xe9ciser un point int\xe9ressant, c'est que quand on a dans notre constructeur un param\xe8tre et qu'on veut l'utiliser dans la classe State, il suffit d'utiliser widget point, le nom du param\xe8tre qui a \xe9t\xe9 pass\xe9. Ensuite, ce Controller va \xeatre initialis\xe9 et pour terminer, on va utiliser un ChewieController qui lui, nous permettra d'ajouter des fonctionnalit\xe9s. On pourra par exemple, d\xe9finir si on veut l' \xab auto-play \xbb ou si on veut un \xab looping \xbb. La m\xe9thode qui est red\xe9finie ici, dispose sera appel\xe9e une fois que le widget sera d\xe9truit. On veillera donc \xe0 lib\xe9rer les ressources qui ont \xe9t\xe9 utilis\xe9es par nos diff\xe9rents Controllers. Au niveau du build, cela se fait de mani\xe8re classique, on a un \xab scaffold \xbb avec la barre, la couleur : backgroundColor qui a \xe9t\xe9 d\xe9finie dans le fichier constants.dart. Et on voit ici que on utilise un FutureBuilder puisque la r\xe9cup\xe9ration des donn\xe9es devra se faire de mani\xe8re asynchrone. Lors du chargement, on proc\xe9dera l\xe0 aussi de mani\xe8re habituelle en affichant un \xab spinner \xbb qui tournera. Et une fois que la connexion aura \xe9t\xe9 \xe9tablie et qu'on aura r\xe9cup\xe9r\xe9 les donn\xe9es, on pourra afficher notre vid\xe9o gr\xe2ce au chewie et on utilisera une aspiration pour garder les bonnes proportions de la vid\xe9o. Si vous utilisez un appareil iOS, il faut savoir que la lecture vid\xe9o ne marchera pas sur le simulateur. Il faudra utiliser un t\xe9l\xe9phone ou une tablette physique. Par ailleurs, sur Android, pour que la lecture fonctionne, j'ai d\xfb ajouter un fichier de configuration de r\xe9seau pour les derni\xe8res versions d'Android. Je suis donc all\xe9 sur le r\xe9pertoire android, dans le r\xe9pertoire res et enfin, j'ai cr\xe9\xe9 un nouveau r\xe9pertoire qui s'appelle \xab xml \xbb. \xc0 l'int\xe9rieur duquel j'ai cr\xe9\xe9 un fichier que j'ai nomm\xe9 \xab network_security_config.xml \xbb et qui contient le xml suivant. Celui-ci autorise les requ\xeates vers le domaine orangevalleycaa.org, m\xeame si la connexion n'est pas s\xe9curis\xe9e ; car en effet, l'API nous retourne une adresse en HTTP et non en HTTPS. On peut le voir d'ailleurs ici : au niveau de video_url, on a bien un HTTP. La connexion n'est donc pas s\xe9curis\xe9e. Il faudra ensuite ajouter ce fichier de configuration dans le fichier Manifest au niveau du \xab tag \xbb application. Il y a deux fa\xe7ons de le faire : soit on utilise comme j'ai pu le faire ici, \xab android: usesCleartextTraffic \xbb est \xe9gal \xe0 True, le CleartextTraffic suffit pour les versions d'Android inf\xe9rieures \xe0 l'API 28 qui correspond \xe0 Androit 9. Pour les autres versions, il faudra utiliser la ligne suivante, donc utiliser le fichier que nous venons de cr\xe9er. Nous avons ainsi vu comment nous pouvons faire une lecture vid\xe9o depuis notre application Flutter."))}p.isMDXComponent=!0}}]);